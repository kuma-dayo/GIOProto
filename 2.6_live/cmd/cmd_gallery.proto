syntax = "proto3";

package proto;

import "define.proto";

message GalleryFlowerStartParam {
    uint32 target_score = 1;
}

message GalleryStartNotify {
    uint32 gallery_id = 1;
    uint32 end_time = 2;
    uint32 player_count = 3;
    uint32 owner_uid = 4;
    
    oneof detail {
        GalleryFlowerStartParam flower_start_param = 11;
    }
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5560;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GalleryBalloonShootNotify {
    uint32 gallery_id = 1;
    int32 add_score = 2;
    uint32 combo = 3;
    uint64 combo_disable_time = 4;
    uint32 cur_score = 5;
    uint32 trigger_entity_id = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5533;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GalleryBalloonScoreNotify {
    uint32 gallery_id = 1;
    map<uint32, uint32> uid_score_map = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5510;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BalloonSettleInfo {
    uint32 uid = 1;
    uint32 shoot_count = 2;
    uint32 max_combo = 3;
    uint32 final_score = 4;
    OnlinePlayerInfo player_info = 5;
}

message GalleryStopNotify {
    uint32 gallery_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5515;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message FallSettleInfo {
    uint32 uid = 1;
    uint32 catch_count = 2;
    map<uint32, uint32> flower_ring_catch_count_map = 3;
    uint32 final_score = 4;
    OnlinePlayerInfo player_info = 5;
    uint32 remain_time = 6;
}

message GalleryFallCatchNotify {
    uint32 gallery_id = 1;
    uint32 add_score = 2;
    uint32 cur_score = 3;
    map<uint32, uint32> ball_catch_count_map = 4;
    bool is_ground = 5;
    uint32 time_cost = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5537;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message FallPlayerBrief {
    uint32 uid = 1;
    uint32 score = 2;
    bool is_ground = 3;
}

message GalleryFallScoreNotify {
    uint32 gallery_id = 1;
    map<uint32, FallPlayerBrief> uid_brief_map = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5593;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BalloonPlayerInfo {
    uint32 uid = 1;
    uint32 combo = 3;
    uint32 combo_disable_time = 4;
    uint32 cur_score = 5;
}

message FallPlayerInfo {
    uint32 uid = 1;
    uint32 cur_score = 2;
    map<uint32, uint32> ball_catch_count_map = 3;
    bool is_ground = 4;
    uint32 time_cost = 5;
}

message SceneGalleryBalloonInfo {
    map<uint32, BalloonPlayerInfo> scene_player_balloon_info_map = 1;
    uint32 end_time = 2;
}

message SceneGalleryFallInfo {
    map<uint32, FallPlayerInfo> scene_player_fall_info_map = 1;
    uint32 end_time = 2;
}

message SceneGalleryFlowerInfo {
    uint32 cur_score = 1;
    uint32 target_score = 2;
    uint32 end_time = 3;
}

message SceneGalleryBulletInfo {
    map<uint32, uint32> hit_count_map = 1;
    uint32 end_time = 2;
}

message SceneGalleryBrokenFloorInfo {
    map<uint32, uint32> fall_count_map = 1;
    uint32 end_time = 2;
}

message SceneGalleryHideAndSeekInfo {
    repeated uint32 visible_uid_list = 1;
    repeated uint32 caught_uid_list = 2;
}

message SceneGalleryBuoyantCombatInfo {
    uint32 kill_monster_count = 1;
    uint32 kill_special_monster_count = 2;
    uint32 score = 3;
}

message SceneGalleryProgressInfo {
    string key = 1;
    repeated uint32 progress_stage_list = 2;
    uint32 progress = 3;
    uint32 ui_form = 4;
}

message SceneGalleryBounceConjuringInfo {
    uint32 total_score = 1;
    uint32 total_destroyed_machine_count = 2;
}

message SceneGalleryHandballInfo {
    bool is_have_ball = 1;
    PlaceInfo ball_place_info = 2;
}

message SceneGallerySumoInfo {
    uint32 score = 1;
    uint32 kill_normal_mosnter_num = 2;
    uint32 kill_elite_monster_num = 3;
}

message SceneGallerySalvagePreventInfo {
    uint32 monster_count = 1;
}

message SceneGallerySalvageEscortInfo {
    uint32 monster_count = 1;
    uint32 box_count = 2;
    uint32 max_monster_count = 3;
    uint32 max_box_count = 4;
}

message SceneGalleryCrystalLinkInfo {
    uint32 score = 1;
}

message SceneGalleryIrodoriMasterInfo {
    uint32 level_id = 1;
    uint32 difficulty = 2;
    bool is_cg_viewed = 3;
}

message SceneGalleryHomeBalloonInfo {
    uint32 score = 1;
}

message SceneGalleryInfo {
    uint32 gallery_id = 1;
    uint32 end_time = 2;
    GalleryStageType stage = 3;
    uint32 pre_start_end_time = 4;
    repeated SceneGalleryProgressInfo progress_info_list = 5;
    uint32 player_count = 6;
    uint32 owner_uid = 7;
    
    oneof info {
        SceneGalleryBalloonInfo balloon_info = 10;
        SceneGalleryFallInfo fall_info = 11;
        SceneGalleryFlowerInfo flower_info = 12;
        SceneGalleryBulletInfo bullet_info = 13;
        SceneGalleryBrokenFloorInfo broken_floor_info = 14;
        SceneGalleryHideAndSeekInfo hide_and_seek_info = 15;
        SceneGalleryBuoyantCombatInfo buoyant_combat_info = 16;
        SceneGalleryBounceConjuringInfo bounce_conjuring_info = 17;
        SceneGalleryHandballInfo handball_info = 18;
        SceneGallerySumoInfo sumo_info = 19;
        SceneGallerySalvagePreventInfo salvage_prevent_info = 20;
        SceneGallerySalvageEscortInfo salvage_escort_info = 21;
        SceneGalleryHomeBalloonInfo home_balloon_info = 22;
        SceneGalleryCrystalLinkInfo crystal_link_info = 23;
        SceneGalleryIrodoriMasterInfo irodori_master_info = 24;
    }
}

message GetAllSceneGalleryInfoReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5544;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GetAllSceneGalleryInfoRsp {
    int32 retcode = 1;
    repeated SceneGalleryInfo gallery_info_list = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5545;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GalleryFlowerCatchNotify {
    uint32 gallery_id = 1;
    uint32 add_score = 2;
    uint32 cur_score = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5575;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GalleryPreStartNotify {
    uint32 gallery_id = 1;
    uint32 pre_start_end_time = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5534;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GalleryBulletHitNotify {
    uint32 gallery_id = 1;
    uint32 hit_count = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5579;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GalleryBrokenFloorFallNotify {
    uint32 gallery_id = 1;
    uint32 fall_count = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5591;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message InterruptGalleryReq {
    uint32 gallery_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5597;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message InterruptGalleryRsp {
    int32 retcode = 1;
    uint32 gallery_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5588;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SceneGalleryInfoNotify {
    SceneGalleryInfo gallery_info = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5528;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BuoyantCombatGallerySettleInfo {
    uint32 gallery_id = 1;
    uint32 kill_monster_count = 2;
    uint32 kill_special_monster_count = 3;
    uint32 kill_target_count = 4;
    uint32 final_score = 5;
    uint32 gallery_level = 6;
    uint32 gallery_multiple = 7;
}

message BounceConjuringGallerySettleInfo {
    uint32 score = 1;
    uint32 destroyed_machine_count = 2;
    float damage = 3;
    uint32 normal_hit_count = 4;
    uint32 perfect_hit_count = 5;
    uint32 fever_count = 6;
    OnlinePlayerInfo player_info = 7;
    repeated ExhibitionDisplayInfo card_list = 8;
    map<uint32, uint32> gadget_count_map = 9;
}

message GalleryBounceConjuringHitNotify {
    uint32 gallery_id = 1;
    uint32 add_score = 2;
    bool is_perfect = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5555;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GallerySumoKillMonsterNotify {
    uint32 gallery_id = 1;
    uint32 score = 2;
    uint32 kill_normal_mosnter_num = 3;
    uint32 kill_elite_monster_num = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5546;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GalleryCrystalLinkKillMonsterNotify {
    uint32 gallery_id = 1;
    uint32 score = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5574;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GalleryCrystalLinkBuffInfoNotify {
    uint32 gallery_id = 1;
    uint32 buff_id = 2;
    bool is_buff_valid = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5556;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message FishInfo {
    uint32 into_bag_count = 1;
    uint32 free_count = 2;
}

message FishingScore {
    uint32 fishing_score = 1;
    bool is_new_record = 2;
}

message FishingGallerySettleInfo {
    map<uint32, FishInfo> fish_map = 1;
    repeated FishingScore fishing_score_list = 2;
}

message RacingGallerySettleInfo {
    uint32 use_time = 1;
    GalleryStopReason reason = 2;
    uint32 winner_uid = 3;
}

message SalvagePreventGallerySettleInfo {
    uint32 monster_count = 1;
    uint32 time_remain = 2;
    uint32 final_score = 3;
    SalvagePreventStopReason reason = 4;
}

message SalvageEscortGallerySettleInfo {
    uint32 time_remain = 1;
    SalvageEscortStopReason reason = 2;
}

message BalloonGallerySettleInfo {
    uint32 score = 1;
    uint32 hit_count = 2;
    GalleryStopReason reason = 3;
    uint32 owner_uid = 4;
}

message IrodoriMasterGallerySettleInfo {
    uint32 level_id = 1;
    uint32 difficult = 2;
    bool is_finish = 3;
    uint32 finish_time = 4;
    GalleryStopReason reason = 5;
}

message PhotoGallerySettleInfo {
    GalleryStopReason reason = 1;
}

enum GalleryStageType {
    GALLERY_NONE = 0;
    GALLERY_PRESTART = 1;
    GALLERY_START = 2;
}

enum GalleryStopReason {
    GALLERY_STOP_NONE = 0;
    GALLERY_STOP_TIMEUP = 1;
    GALLERY_STOP_CLIENT_INTERRUPT = 2;
    GALLERY_STOP_LUA_INTERRUPT_SUCCESS = 3;
    GALLERY_STOP_LUA_INTERRUPT_FAIL = 4;
    GALLERY_STOP_OWNER_LEAVE_SCENE = 5;
    GALLERY_STOP_PLAY_INIT_FAILED = 6;
    GALLERY_STOP_OTHER_PLAYER_ENTER = 7;
    GALLERY_STOP_AVATAR_DIE = 8;
    GALLERY_STOP_FINISHED = 9;
}

enum SalvagePreventStopReason {
    SALVAGE_PREVENT_STOP_NONE = 0;
    SALVAGE_PREVENT_STOP_SUCCESS = 1;
    SALVAGE_PREVENT_STOP_ARRIVAL = 2;
    SALVAGE_PREVENT_STOP_INTERRUPT = 3;
    SALVAGE_PREVENT_STOP_LEAVE = 4;
    SALVAGE_PREVENT_STOP_FULL = 5;
    SALVAGE_PREVENT_STOP_AWAY = 6;
}

enum SalvageEscortStopReason {
    SALVAGE_ESCORT_STOP_NONE = 0;
    SALVAGE_ESCORT_STOP_SUCCESS = 1;
    SALVAGE_ESCORT_STOP_DUMP = 2;
    SALVAGE_ESCORT_STOP_TIME = 3;
    SALVAGE_ESCORT_STOP_INTERRUPT = 4;
    SALVAGE_ESCORT_STOP_LEAVE = 5;
    SALVAGE_ESCORT_STOP_FULL = 6;
}
