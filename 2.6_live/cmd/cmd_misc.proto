syntax = "proto3";

package proto;

import "define.proto";
import "cmd/cmd_social.proto";

message KeepAliveNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 60;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GmTalkReq {
    string msg = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 33;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GmTalkRsp {
    int32 retcode = 1;
    string msg = 2;
    string retmsg = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 10;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MsgParam {
    oneof param {
        uint32 int_param = 1;
        float flt_param = 2;
        string str_param = 3;
    }
}

message ShowMessageNotify {
    SvrMsgId msg_id = 1;
    repeated MsgParam params = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 15;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PingReq {
    uint32 seq = 1;
    uint32 client_time = 2;
    bytes sc_data = 3;
    float ue_time = 4;
    double total_tick_time = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 37;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PingRsp {
    int32 retcode = 1;
    uint32 seq = 2;
    uint32 client_time = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 93;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GetOnlinePlayerListReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 45;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GetOnlinePlayerListRsp {
    int32 retcode = 1;
    repeated OnlinePlayerInfo player_info_list = 2;
    uint32 param = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 75;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ServerTimeNotify {
    uint64 server_time = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 34;
        ENET_CHANNEL_ID = 1;
        ENET_IS_RELIABLE = 1;
    }
}

message ServerLogNotify {
    ServerLogType log_type = 1;
    ServerLogLevel log_level = 2;
    string server_log = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 79;
        ENET_CHANNEL_ID = 1;
        ENET_IS_RELIABLE = 1;
    }
}

message ClientReconnectNotify {
    ClientReconnectReason reason = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 91;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RobotPushPlayerDataNotify {
    bytes bin = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 88;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ClientReportNotify {
    string report_type = 1;
    string report_value = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 28;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message UnionCmd {
    uint32 message_id = 1;
    bytes body = 2;
}

message UnionCmdNotify {
    repeated UnionCmd cmd_list = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 55;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GetOnlinePlayerInfoReq {
    bool is_online_id = 1;
    
    oneof player_id {
        uint32 target_uid = 2;
        string online_id = 3;
        string psn_id = 4;
    }
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 46;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GetOnlinePlayerInfoRsp {
    int32 retcode = 1;
    uint32 target_uid = 2;
    OnlinePlayerInfo target_player_info = 3;
    uint32 param = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 74;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SegmentInfo {
    uint32 module = 1;
    uint32 offset = 2;
    uint32 size = 3;
}

message SegmentCRCInfo {
    uint32 module = 1;
    uint32 offset = 2;
    uint32 size = 3;
    string crc = 4;
    int32 retcode = 5;
}

message CheckSegmentCRCNotify {
    repeated SegmentInfo info_list = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 56;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message CheckSegmentCRCReq {
    repeated SegmentCRCInfo info_list = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 83;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PlayerRTTInfo {
    uint32 uid = 1;
    uint32 rtt = 2;
}

message WorldPlayerRTTNotify {
    repeated PlayerRTTInfo player_rtt_list = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 26;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message EchoNotify {
    uint32 seq_id = 1;
    string content = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 62;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message UpdateRedPointNotify {
    repeated RedPointData red_point_list = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 9;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ClientBulletCreateNotify {
    uint32 param = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 89;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ChangeServerGlobalValueNotify {
    uint32 entity_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 65;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GmTalkNotify {
    string msg = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 3;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message LastPacketPrintNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 67;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

enum SvrMsgId {
    MSG_UNKNOWN = 0;
    MSG_BLOCK_REFRESH_COUNTDOWN = 1;
    MSG_AVATAR_REVIVE_BY_STATUE = 2;
    MSG_DAILY_TASK_REWARD_MAX_NUM = 3;
    MSG_ROUTINE_TYPE_NOT_OPEN = 4;
    MSG_ROUTINE_TYPE_REWARD_MAX_NUM = 5;
    MSG_MECHANICUS_COIN_LIMIT = 6;
}

enum ServerLogType {
    SERVER_LOG_NONE = 0;
    SERVER_LOG_ABILITY = 1;
    SERVER_LOG_LEVEL = 2;
    SERVER_LOG_ENTITY = 3;
    SERVER_LOG_LUA = 4;
}

enum ServerLogLevel {
    LOG_LEVEL_NONE = 0;
    LOG_LEVEL_DEBUG = 1;
    LOG_LEVEL_INFO = 2;
    LOG_LEVEL_WARNING = 3;
    LOG_LEVEL_ERROR = 4;
}

enum ClientReconnectReason {
    CLIENT_RECONNNECT_NONE = 0;
    CLIENT_RECONNNECT_QUIT_MP = 1;
}
