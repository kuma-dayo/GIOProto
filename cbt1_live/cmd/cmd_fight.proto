syntax = "proto3";

package proto;

import "define.proto";

message HitCollision {
    HitColliderType hit_collider_type = 1;
    int32 hit_box_index = 2;
    Vector hit_point = 3;
    Vector hit_dir = 4;
}

message AttackHitEffectResult {
    uint32 hit_eff_level = 1;
    float retreat_strength = 2;
    float air_strength = 3;
    float hit_halt_time = 4;
    float hit_halt_time_scale = 5;
}

message AbilityIdentifier {
    uint32 instanced_ability_id = 1;
    uint32 ability_caster_id = 2;
    int32 local_id = 3;
    uint32 instanced_modifier_id = 4;
    uint32 modifier_owner_id = 5;
}

message AttackResult {
    uint32 attacker_id = 1;
    uint32 defense_id = 2;
    string anim_event_id = 3;
    AbilityIdentifier ability_identifier = 4;
    string attack_tag = 5;
    float damage = 6;
    bool is_crit = 7;
    HitCollision hit_collision = 8;
    uint32 hit_pos_type = 9;
    uint32 endure_break = 10;
    Vector resolved_dir = 11;
    int32 hit_retreat_angle_compat = 12;
    AttackHitEffectResult hit_eff_result = 13;
    uint32 element_type = 14;
    float damage_percentage = 15;
    float damage_extra = 16;
    float bonus_critical = 17;
    float bonus_critical_hurt = 18;
    bool use_gadget_damage_action = 19;
    uint32 gadget_damage_action_idx = 20;
    uint32 strike_type = 21;
    bool is_resist_text = 22;
    float critical_rand = 23;
    float element_amplify_rate = 24;
}

message EvtBeingHitNotify {
    uint32 peer_id = 1;
    ForwardType forward_type = 2;
    AttackResult attack_result = 3;
    uint32 scene_time = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 301;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message EvtAnimatorParameterNotify {
    ForwardType forward_type = 1;
    uint32 entity_id = 2;
    int32 name_id = 3;
    bool is_server_cache = 4;
    AnimatorParameterValueInfo value = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 302;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message AbilityArgument {
    oneof arg {
        uint32 int_arg = 1;
        float float_arg = 2;
        string str_arg = 3;
    }
}

message HostPlayerNotify {
    uint32 host_uid = 1;
    uint32 host_peer_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 303;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message EvtDoSkillSuccNotify {
    ForwardType forward_type = 1;
    uint32 caster_id = 2;
    uint32 skill_id = 3;
    Vector forward = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 304;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message EvtCreateGadgetNotify {
    ForwardType forward_type = 1;
    uint32 entity_id = 2;
    uint32 config_id = 3;
    uint32 camp_id = 4;
    uint32 camp_type = 5;
    Vector init_pos = 6;
    Vector init_euler_angles = 7;
    uint64 guid = 8;
    uint32 owner_entity_id = 9;
    uint32 target_entity_id = 10;
    bool is_async_load = 11;
    uint32 target_lock_point_index = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 305;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message EvtDestroyGadgetNotify {
    ForwardType forward_type = 1;
    uint32 entity_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 306;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message EvtFaceToEntityNotify {
    ForwardType forward_type = 1;
    uint32 entity_id = 2;
    uint32 face_entity_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 307;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message EvtFaceToDirNotify {
    ForwardType forward_type = 1;
    uint32 entity_id = 2;
    Vector face_dir = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 308;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message EvtCostStaminaNotify {
    float cost_stamina = 1;
    uint32 skill_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 309;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message EvtSetAttackTargetNotify {
    ForwardType forward_type = 1;
    uint32 entity_id = 2;
    uint32 attack_target_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 310;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message EvtAnimatorStateChangedNotify {
    ForwardType forward_type = 1;
    uint32 entity_id = 2;
    uint32 to_state_hash = 3;
    uint32 normalized_time_compact = 4;
    int32 face_angle_compact = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 311;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message EvtRushMoveNotify {
    ForwardType forward_type = 1;
    uint32 entity_id = 2;
    Vector velocity = 3;
    float timeRange = 4;
    int32 state_name_hash = 5;
    int32 face_angle_compact = 6;
    Vector pos = 7;
    Vector rush_attack_target_pos = 8;
    Vector rush_to_pos = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 312;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message EvtBulletHitNotify {
    ForwardType forward_type = 1;
    uint32 forward_peer = 2;
    uint32 entity_id = 3;
    uint32 hit_entity_id = 4;
    HitColliderType hit_collider_type = 5;
    int32 hit_box_index = 6;
    Vector hit_point = 7;
    Vector hit_normal = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 313;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message EvtBulletDeactiveNotify {
    ForwardType forward_type = 1;
    uint32 entity_id = 2;
    Vector disappear_pos = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 314;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message EvtEntityStartDieEndNotify {
    ForwardType forward_type = 1;
    uint32 entity_id = 2;
    bool immediately = 3;
    uint32 die_state_flag = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 315;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message EvtBulletMoveNotify {
    ForwardType forward_type = 1;
    uint32 entity_id = 2;
    Vector cur_pos = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 322;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message EvtAvatarEnterFocusNotify {
    ForwardType forward_type = 1;
    uint32 entity_id = 2;
    bool fast_focus = 3;
    bool use_focus_sticky = 4;
    bool use_auto_focus = 5;
    bool use_gyro = 6;
    bool can_move = 7;
    bool show_cross_hair = 8;
    Vector focus_forward = 9;
    bool enter_normal_focus_shoot = 10;
    bool enter_holding_focus_shoot = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 323;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message EvtAvatarExitFocusNotify {
    ForwardType forward_type = 1;
    uint32 entity_id = 2;
    Vector finish_forward = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 324;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message EvtAvatarUpdateFocusNotify {
    ForwardType forward_type = 1;
    uint32 entity_id = 2;
    Vector focus_forward = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 325;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message EntityAuthorityChangeNotify {
    uint32 entity_id = 1;
    uint32 authority_peer_id = 2;
    AbilitySyncStateInfo ability_info = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 326;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message BuffAddNotify {
    uint32 entity_id = 1;
    uint32 buff_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 327;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message BuffDelNotify {
    uint32 entity_id = 1;
    uint32 buff_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 328;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message MonsterAlertChangeNotify {
    uint32 avatar_entity_id = 2;
    uint32 is_alert = 3;
    repeated uint32 monster_entity_list = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 329;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message MonsterForceAlertNotify {
    uint32 monster_entity_id = 1;
    bool is_alert = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 330;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MonsterForceAiNotify {
    uint32 monster_entity_id = 1;
    bool is_open = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 331;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message AvatarEnterElementViewNotify {
    uint32 avatar_entity_id = 1;
    bool is_triggerd = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 332;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message TriggerCreateGadgetToEquipPartNotify {
    uint32 entity_id = 1;
    uint32 gadget_entity_id = 2;
    uint32 gadget_id = 3;
    string equip_part = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 333;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message EvtEntityRenderersChangedNotify {
    ForwardType forward_type = 1;
    uint32 entity_id = 2;
    bool is_server_cache = 3;
    EntityRendererChangedInfo renderer_changed_info = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 334;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message AnimatorForceSetAirMoveNotify {
    ForwardType forward_type = 1;
    uint32 entity_id = 2;
    bool in_air_move = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 335;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message AiSkillCdInfo {
    map<uint32, uint32> skill_cd_map = 1;
}

message EvtAiSyncSkillCdNotify {
    map<uint32, AiSkillCdInfo> ai_cd_map = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 336;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

enum ForwardType {
    FORWARD_LOCAL = 0;
    FORWARD_TO_ALL = 1;
    FORWARD_TO_ALL_EXCEPT_CUR = 2;
    FORWARD_TO_HOST = 3;
    FORWARD_TO_ALL_GUEST = 4;
    FORWARD_TO_PEER = 5;
    FORWARD_TO_PEERS = 6;
    FORWARD_ONLY_SERVER = 7;
    FORWARD_TO_ALL_EXIST_EXCEPT_CUR = 8;
}

enum HitColliderType {
    HIT_COLLIDER_INVALID = 0;
    HIT_COLLIDER_HIT_BOX = 1;
    HIT_COLLIDER_WET_HIT_BOX = 2;
    HIT_COLLIDER_HEAD_BOX = 3;
}
