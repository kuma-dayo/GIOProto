syntax = "proto3";

package proto;

import "define.proto";

message PlayerStartMatchReq {
    MatchType match_type = 1;
    uint32 dungeon_id = 11;
    uint32 mp_play_id = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 4151;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PlayerStartMatchRsp {
    int32 retcode = 1;
    MatchType match_type = 2;
    uint32 dungeon_id = 11;
    uint32 mp_play_id = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 4152;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlayerMatchInfoNotify {
    uint32 host_uid = 1;
    MatchType match_type = 2;
    uint32 match_begin_time = 3;
    uint32 estimate_match_cost_time = 4;
    uint32 dungeon_id = 11;
    uint32 mp_play_id = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 4153;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlayerCancelMatchReq {
    MatchType match_type = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 4154;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PlayerCancelMatchRsp {
    int32 retcode = 1;
    MatchType match_type = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 4155;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlayerMatchStopNotify {
    uint32 host_uid = 1;
    MatchReason reason = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 4156;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlayerMatchSuccNotify {
    MatchType match_type = 1;
    uint32 confirm_end_time = 2;
    uint32 dungeon_id = 11;
    uint32 mp_play_id = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 4157;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlayerConfirmMatchReq {
    MatchType match_type = 1;
    bool is_agreed = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 4158;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PlayerConfirmMatchRsp {
    int32 retcode = 1;
    MatchType match_type = 2;
    bool is_agreed = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 4159;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlayerAllowEnterMpAfterAgreeMatchNotify {
    uint32 target_uid = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 4160;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlayerMatchAgreedResultNotify {
    uint32 target_uid = 1;
    
    Reason reason = 2;
    enum Reason {
        SUCC = 0;
        TARGET_SCENE_CANNOT_ENTER = 1;
        SELF_MP_UNAVAILABLE = 2;
    }
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 4161;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlayerApplyEnterMpAfterMatchAgreedNotify {
    MatchType match_type = 1;
    OnlinePlayerInfo src_player_info = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 4162;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}
