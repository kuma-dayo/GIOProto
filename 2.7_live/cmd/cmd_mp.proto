syntax = "proto3";

package proto;

import "define.proto";

message PlayerApplyEnterMpNotify {
    OnlinePlayerInfo src_player_info = 11;
    uint32 src_app_id = 6;
    uint32 src_thread_index = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1818;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlayerApplyEnterMpReq {
    uint32 target_uid = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1809;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PlayerApplyEnterMpRsp {
    int32 retcode = 5;
    uint32 target_uid = 4;
    uint32 param = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1843;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlayerApplyEnterMpResultNotify {
    uint32 target_uid = 7;
    bool is_agreed = 4;
    
    Reason reason = 14;
    enum Reason {
        PLAYER_JUDGE = 0;
        SCENE_CANNOT_ENTER = 1;
        PLAYER_CANNOT_ENTER_MP = 2;
        SYSTEM_JUDGE = 3;
        ALLOW_ENTER_PLAYER_FULL = 4;
        WORLD_LEVEL_LOWER_THAN_HOST = 5;
        HOST_IN_MATCH = 6;
        PLAYER_IN_BLACKLIST = 7;
        PS_PLAYER_NOT_ACCEPT_OTHERS = 8;
        HOST_IS_BLOCKED = 9;
        OTHER_DATA_VERSION_NOT_LATEST = 10;
        DATA_VERSION_NOT_LATEST = 11;
        PLAYER_NOT_IN_PLAYER_WORLD = 12;
        MAX_PLAYER = 13;
    }
    
    string target_nickname = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1804;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlayerApplyEnterMpResultReq {
    uint32 apply_uid = 15;
    bool is_agreed = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1828;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PlayerApplyEnterMpResultRsp {
    int32 retcode = 6;
    uint32 apply_uid = 4;
    bool is_agreed = 12;
    uint32 param = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1803;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlayerQuitFromMpNotify {
    QuitReason reason = 11;
    enum QuitReason {
        INVALID = 0;
        HOST_NO_OTHER_PLAYER = 1;
        KICK_BY_HOST = 2;
        BACK_TO_MY_WORLD = 3;
        KICK_BY_HOST_LOGOUT = 4;
        KICK_BY_HOST_BLOCK = 5;
        BE_BLOCKED = 6;
        KICK_BY_HOST_ENTER_HOME = 7;
        HOST_SCENE_INVALID = 8;
        KICK_BY_PLAY = 9;
    }
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1826;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlayerPreEnterMpNotify {
    uint32 uid = 10;
    
    State state = 15;
    enum State {
        INVALID = 0;
        START = 1;
        TIMEOUT = 2;
    }
    
    string nickname = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1847;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GetPlayerMpModeAvailabilityReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1816;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GetPlayerMpModeAvailabilityRsp {
    int32 retcode = 12;
    int32 mp_ret = 1;
    repeated uint32 param_list = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1801;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlayerSetOnlyMPWithPSPlayerReq {
    bool is_only = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1802;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PlayerSetOnlyMPWithPSPlayerRsp {
    int32 retcode = 4;
    bool is_only = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1813;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PSPlayerApplyEnterMpReq {
    string target_psn_id = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1837;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PSPlayerApplyEnterMpRsp {
    int32 retcode = 8;
    string target_psn_id = 11;
    uint32 param = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1832;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MpPlayOwnerCheckReq {
    uint32 mp_play_id = 13;
    bool is_skip_match = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1814;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message MpPlayOwnerCheckRsp {
    int32 retcode = 1;
    uint32 mp_play_id = 7;
    uint32 wrong_uid = 4;
    bool is_skip_match = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1812;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MpPlayOwnerStartInviteReq {
    uint32 mp_play_id = 4;
    bool is_skip_match = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1846;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message MpPlayOwnerStartInviteRsp {
    int32 retcode = 13;
    uint32 mp_play_id = 14;
    bool is_skip_match = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1827;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MpPlayOwnerInviteNotify {
    uint32 mp_play_id = 15;
    uint32 cd = 6;
    bool is_remain_reward = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1815;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MpPlayGuestReplyInviteReq {
    uint32 mp_play_id = 3;
    bool is_agree = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1811;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message MpPlayGuestReplyInviteRsp {
    int32 retcode = 15;
    uint32 mp_play_id = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1841;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MpPlayGuestReplyNotify {
    uint32 mp_play_id = 12;
    uint32 uid = 3;
    bool is_agree = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1805;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MpPlayPrepareNotify {
    uint32 mp_play_id = 1;
    uint32 prepare_end_time = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1839;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MpPlayInviteResultNotify {
    uint32 mp_play_id = 10;
    bool all_argee = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1806;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MpPlayPrepareInterruptNotify {
    uint32 mp_play_id = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1848;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MpBlockNotify {
    uint32 end_time = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 1808;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}
