syntax = "proto3";

package proto;

import "define.proto";

message PlayerStartMatchReq {
    MatchType match_type = 4;
    uint32 dungeon_id = 14;
    uint32 mp_play_id = 11;
    uint32 mechanicus_difficult_level = 2;
    uint32 match_id = 13;
    repeated uint32 match_param_list = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 4168;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PlayerStartMatchRsp {
    int32 retcode = 12;
    MatchType match_type = 3;
    uint32 param = 10;
    uint32 dungeon_id = 6;
    uint32 mp_play_id = 14;
    uint32 mechanicus_difficult_level = 9;
    uint32 match_id = 8;
    uint32 punish_end_time = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 4159;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlayerMatchInfoNotify {
    uint32 host_uid = 3;
    MatchType match_type = 1;
    uint32 match_begin_time = 7;
    uint32 estimate_match_cost_time = 10;
    uint32 dungeon_id = 5;
    uint32 mp_play_id = 15;
    uint32 mechanicus_difficult_level = 2;
    uint32 match_id = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 4193;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlayerCancelMatchReq {
    MatchType match_type = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 4154;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PlayerCancelMatchRsp {
    int32 retcode = 2;
    MatchType match_type = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 4178;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlayerMatchStopNotify {
    uint32 host_uid = 12;
    MatchReason reason = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 4153;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MatchPlayerInfo {
    OnlinePlayerInfo player_info = 1;
    bool is_agreed = 2;
}

message GeneralMatchInfo {
    uint32 match_id = 1;
    repeated MatchPlayerInfo player_list = 2;
    uint32 match_param = 3;
}

message PlayerMatchSuccNotify {
    MatchType match_type = 13;
    uint32 confirm_end_time = 7;
    uint32 host_uid = 8;
    uint32 dungeon_id = 1;
    uint32 mp_play_id = 5;
    uint32 mechanicus_difficult_level = 10;
    GeneralMatchInfo general_match_info = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 4176;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlayerConfirmMatchReq {
    MatchType match_type = 5;
    bool is_agreed = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 4197;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PlayerConfirmMatchRsp {
    int32 retcode = 10;
    MatchType match_type = 1;
    bool is_agreed = 13;
    uint32 match_id = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 4166;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlayerAllowEnterMpAfterAgreeMatchNotify {
    uint32 target_uid = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 4151;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlayerMatchAgreedResultNotify {
    uint32 target_uid = 14;
    
    Reason reason = 7;
    enum Reason {
        SUCC = 0;
        TARGET_SCENE_CANNOT_ENTER = 1;
        SELF_MP_UNAVAILABLE = 2;
        OTHER_DATA_VERSION_NOT_LATEST = 3;
        DATA_VERSION_NOT_LATEST = 4;
    }
    
    MatchType match_type = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 4152;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlayerApplyEnterMpAfterMatchAgreedNotify {
    MatchType match_type = 14;
    OnlinePlayerInfo src_player_info = 8;
    uint32 matchserver_id = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 4163;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlayerGeneralMatchDismissNotify {
    uint32 match_id = 13;
    MatchReason reason = 11;
    repeated uint32 uid_list = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 4187;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlayerGeneralMatchConfirmNotify {
    uint32 match_id = 7;
    uint32 uid = 8;
    bool is_agree = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 4182;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlayerGetForceQuitBanInfoReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 4164;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PlayerGetForceQuitBanInfoRsp {
    int32 retcode = 11;
    uint32 match_id = 8;
    uint32 expire_time = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 4162;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ServerTryCancelGeneralMatchNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 4196;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}
