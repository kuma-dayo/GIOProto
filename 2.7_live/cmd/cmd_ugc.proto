syntax = "proto3";

package proto;

import "define.proto";
import "cmd/cmd_social.proto";

message UgcMusicNote {
    uint32 start_time = 1;
    uint32 end_time = 2;
}

message UgcMusicTrack {
    repeated UgcMusicNote music_note_list = 1;
}

message UgcMusicRecord {
    uint32 music_id = 1;
    repeated UgcMusicTrack music_track_list = 2;
}

message UgcMusicBriefInfo {
    uint64 ugc_guid = 1;
    uint32 music_id = 2;
    string creator_nickname = 3;
    uint32 note_count = 4;
    uint32 max_score = 5;
    uint32 self_max_score = 6;
    uint32 save_time = 7;
    uint32 publish_time = 8;
    uint32 save_idx = 9;
    bool is_played = 10;
    uint32 version = 11;
    bool is_published = 12;
    bool is_changed_after_publish = 13;
    bool is_psn_platform = 14;
    uint64 import_from_ugc_guid = 15;
    uint32 save_page_type = 21;
    repeated uint32 before_note_list = 22;
    repeated uint32 after_note_list = 23;
    uint32 real_time_edit_time = 24;
    uint32 time_line_edit_time = 25;
}

message GetUgcReq {
    UgcType ugc_type = 1;
    uint64 ugc_guid = 10;
    GetUgcType get_ugc_type = 12;
    bool is_require_brief = 15;
    RecordUsage ugc_record_usage = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 6318;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GetUgcRsp {
    int32 retcode = 13;
    UgcType ugc_type = 1;
    uint64 ugc_guid = 5;
    RecordUsage ugc_record_usage = 2;
    
    oneof record {
        UgcMusicRecord music_record = 9;
    }
    
    oneof brief {
        UgcMusicBriefInfo music_brief_info = 953;
    }
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 6309;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GetUgcBriefInfoReq {
    UgcType ugc_type = 10;
    uint64 ugc_guid = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 6343;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GetUgcBriefInfoRsp {
    int32 retcode = 9;
    UgcType ugc_type = 3;
    uint64 ugc_guid = 4;
    
    oneof brief {
        UgcMusicBriefInfo music_brief_info = 11;
    }
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 6304;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SaveUgcReq {
    UgcType ugc_type = 12;
    
    oneof record {
        UgcMusicRecord music_record = 10;
    }
    
    oneof brief {
        UgcMusicBriefInfo music_brief_info = 1021;
    }
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 6326;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SaveUgcRsp {
    int32 retcode = 10;
    UgcType ugc_type = 12;
    uint64 ugc_guid = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 6347;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PublishUgcReq {
    uint64 ugc_guid = 8;
    UgcType ugc_type = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 6316;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PublishUgcRsp {
    int32 retcode = 11;
    UgcType ugc_type = 9;
    uint64 ugc_guid = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 6301;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message CheckUgcUpdateReq {
    UgcType ugc_type = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 6302;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message CheckUgcUpdateRsp {
    int32 retcode = 2;
    UgcType ugc_type = 11;
    repeated uint64 update_ugc_guid_list = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 6313;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message UgcNotify {
    bool is_ugc_publish_ban = 6;
    bool is_ugc_feature_closed = 15;
    bool is_ugc_publish_feature_closed = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 6337;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message CheckUgcStateReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 6332;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message CheckUgcStateRsp {
    int32 retcode = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 6314;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

enum UgcType {
    UGC_TYPE_NONE = 0;
    UGC_TYPE_MUSIC_GAME = 1;
}

enum GetUgcType {
    GET_UGC_NONE = 0;
    GET_UGC_TYPE_MINE = 1;
    GET_UGC_TYPE_PUBLISH = 2;
}

enum RecordUsage {
    UGC_RECORD_USAGE_NONE = 0;
    UGC_RECORD_USAGE_IMPORT = 1;
    UGC_RECORD_USAGE_PLAY = 2;
    UGC_RECORD_USAGE_TRIAL = 3;
    UGC_RECORD_USAGE_COMPARE = 4;
}
