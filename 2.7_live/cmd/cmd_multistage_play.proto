syntax = "proto3";

package proto;

import "define.proto";

message InBattleMechanicusBuildingInfo {
    uint32 building_id = 1;
    uint32 level = 2;
    uint32 cost_points = 3;
    uint32 refund_points = 4;
}

message InBattleMechanicusPlayerInfo {
    uint32 uid = 1;
    uint32 building_points = 2;
    repeated InBattleMechanicusBuildingInfo building_list = 3;
    uint32 pick_card_id = 4;
    bool is_card_confirmed = 5;
}

message InBattleMechanicusMonsterInfo {
    uint32 monster_id = 1;
    uint32 count = 2;
    uint32 level = 3;
}

message InBattleMechanicusCardInfo {
    uint32 card_id = 1;
    uint32 cost_points = 2;
    uint32 rand_effect_id = 3;
    uint32 begin_round = 4;
    uint32 end_round = 5;
    InBattleMechanicusCardChallengeState challenge_state = 6;
}

message InBattleMechanicusInfo {
    InBattleMechanicusStageType stage = 1;
    uint64 begin_time_ms = 2;
    uint64 duration_ms = 3;
    uint32 round = 4;
    uint32 total_round = 5;
    uint32 left_monster = 6;
    repeated InBattleMechanicusMonsterInfo monster_list = 7;
    repeated InBattleMechanicusPlayerInfo player_list = 8;
    uint32 excaped_monster_num = 9;
    uint32 max_excape_monster_num = 10;
    uint32 building_stage_duration = 11;
    repeated InBattleMechanicusCardInfo pick_card_list = 12;
    repeated InBattleMechanicusCardInfo history_card_list = 13;
    uint64 wait_begin_time_us = 14;
    uint32 wait_seconds = 15;
    repeated uint32 entrance_list = 16;
    repeated uint32 exit_list = 17;
}

message InBattleFleurFairInfo {
    repeated uint32 ability_group_id_list = 1;
    repeated uint32 gallery_id_list = 2;
    uint32 preview_stage_index = 3;
    uint32 preview_display_duration = 4;
    uint32 gallery_stage_index = 5;
}

message MultistagePlayInfo {
    uint32 play_index = 1;
    uint32 group_id = 2;
    uint32 stage_index = 3;
    uint32 stage_type = 4;
    uint32 begin_time = 5;
    uint32 duration = 6;
    uint32 play_type = 7;
    
    oneof detail {
        InBattleMechanicusInfo mechanicus_info = 101;
        InBattleFleurFairInfo fleur_fair_info = 102;
        HideAndSeekStageInfo hide_and_seek_info = 103;
        InBattleChessInfo chess_info = 104;
        InBattleIrodoriChessInfo irodori_chess_info = 105;
    }
}

message MultistagePlayInfoNotify {
    MultistagePlayInfo info = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5309;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MultistagePlayFinishStageReq {
    uint32 play_index = 13;
    uint32 group_id = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5331;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message InBattleMechanicusExcapeMonsterNotify {
    uint32 excaped_monster_num = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5332;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message InBattleMechanicusLeftMonsterNotify {
    uint32 left_monster = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5317;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message InBattleMechanicusBuildingPointsNotify {
    map<uint32, uint32> player_building_points_map = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5385;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message InBattleMechanicusPickCardReq {
    uint32 play_index = 12;
    uint32 group_id = 1;
    uint32 card_id = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5335;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message InBattleMechanicusPickCardRsp {
    int32 retcode = 5;
    uint32 play_index = 10;
    uint32 group_id = 9;
    uint32 card_id = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5349;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message InBattleMechanicusPickCardNotify {
    uint32 play_index = 11;
    uint32 group_id = 8;
    uint32 player_uid = 9;
    uint32 card_id = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5382;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message InBattleMechanicusConfirmCardReq {
    uint32 play_index = 14;
    uint32 group_id = 13;
    uint32 card_id = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5355;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message InBattleMechanicusConfirmCardRsp {
    int32 retcode = 10;
    uint32 play_index = 1;
    uint32 group_id = 8;
    uint32 card_id = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5327;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message InBattleMechanicusConfirmCardNotify {
    uint32 play_index = 12;
    uint32 group_id = 13;
    uint32 player_uid = 2;
    uint32 card_id = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5307;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message InBattleMechanicusCardResultNotify {
    uint32 play_index = 10;
    uint32 group_id = 14;
    uint64 wait_begin_time_us = 5;
    uint32 wait_seconds = 6;
    repeated InBattleMechanicusCardInfo card_list = 9;
    map<uint32, uint32> player_confirmed_card_map = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5330;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MultistagePlayFinishStageRsp {
    int32 retcode = 15;
    uint32 play_index = 12;
    uint32 group_id = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5397;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MultistageSettleWatcherInfo {
    uint32 watcher_id = 1;
    uint32 cur_progress = 2;
    uint32 total_progress = 3;
    bool is_inverse = 4;
}

message InBattleMechanicusSettleNotify {
    uint32 play_index = 3;
    uint32 group_id = 2;
    repeated MultistageSettleWatcherInfo watcher_list = 7;
    uint32 total_token = 10;
    uint32 real_token = 9;
    uint32 difficulty_percentage = 6;
    bool is_success = 12;
    uint64 scene_time_ms = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5398;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message InBattleMechanicusSettleInfo {
    uint32 play_index = 1;
    uint32 group_id = 2;
    repeated MultistageSettleWatcherInfo watcher_list = 3;
    uint32 total_token = 4;
    uint32 real_token = 5;
    uint32 difficulty_percentage = 6;
    bool is_success = 7;
    uint64 scene_time_ms = 8;
}

message MultistagePlaySettleNotify {
    uint32 play_index = 12;
    uint32 group_id = 1;
    
    oneof detail {
        InBattleMechanicusSettleInfo mechanicus_settle_info = 187;
        InBattleChessSettleInfo chess_settle_info = 411;
        InBattleIrodoriChessSettleInfo irodori_chess_settle_info = 1114;
    }
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5314;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MultistagePlayStageEndNotify {
    uint32 play_index = 13;
    uint32 group_id = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5340;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MultistagePlayEndNotify {
    uint32 play_index = 15;
    uint32 group_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5375;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message FleurFairBuffEnergyNotify {
    uint32 energy = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5359;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message FleurFairGallerySettleInfo {
    bool is_success = 1;
    uint32 energy = 2;
    uint32 gallery_stage_count = 3;
    uint32 gallery_stage_index = 4;
    map<uint32, int32> energy_stat_map = 5;
}

message FleurFairPlayerStatInfo {
    uint32 uid = 1;
    uint32 stat_id = 2;
    int32 param = 3;
    uint32 head_image = 4;
    string nick_name = 5;
    string online_id = 6;
    ProfilePicture profile_picture = 7;
}

message FleurFairBossSettleInfo {
    bool is_success = 1;
    uint32 cost_time = 2;
    uint32 energy = 3;
    repeated FleurFairPlayerStatInfo stat_info_list = 4;
    uint32 reward_token_num = 5;
}

message FleurFairStageSettleNotify {
    uint32 stage_type = 1;
    
    oneof detail {
        FleurFairGallerySettleInfo gallery_settle_info = 4;
        FleurFairBossSettleInfo boss_settle_info = 2;
    }
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5384;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message FleurFairFinishGalleryStageNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5370;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message HideAndSeekPlayerBattleInfo {
    uint32 avatar_id = 1;
    repeated uint32 skill_list = 2;
    bool is_ready = 3;
    uint32 costume_id = 4;
}

message HideAndSeekStageInfo {
    HideAndSeekStageType stage_type = 1;
    uint32 hunter_uid = 2;
    repeated uint32 hider_uid_list = 3;
    map<uint32, HideAndSeekPlayerBattleInfo> battle_info_map = 4;
    uint32 map_id = 5;
    bool is_record_score = 6;
}

message HideAndSeekSelectAvatarReq {
    uint32 avatar_id = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5329;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message HideAndSeekSelectAvatarRsp {
    int32 retcode = 13;
    uint32 avatar_id = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5325;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message HideAndSeekSetReadyReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5383;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message HideAndSeekSetReadyRsp {
    int32 retcode = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5303;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message HideAndSeekSettleInfo {
    uint32 uid = 1;
    repeated ExhibitionDisplayInfo card_list = 2;
    uint32 head_image = 4;
    string nickname = 5;
    string online_id = 6;
    ProfilePicture profile_picture = 7;
}

message HideAndSeekSettleNotify {
    uint32 play_index = 1;
    uint32 stage_type = 14;
    uint32 cost_time = 2;
    repeated uint32 winner_list = 5;
    
    SettleReason reason = 3;
    enum SettleReason {
        SETTLE_REASON_TIME_OUT = 0;
        SETTLE_PLAY_END = 1;
        SETTLE_PLAYER_QUIT = 2;
    }
    
    repeated ExhibitionDisplayInfo score_list = 15;
    repeated HideAndSeekSettleInfo settle_info_list = 12;
    bool is_record_score = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5334;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message HideAndSeekPlayerReadyNotify {
    repeated uint32 uid_list = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5302;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message HideAndSeekPlayerSetAvatarNotify {
    uint32 uid = 14;
    uint32 avatar_id = 4;
    uint32 costume_id = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5316;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ChessCardInfo {
    uint32 card_id = 1;
    uint32 effect_stack = 2;
}

message InBattleChessInfo {
    uint32 round = 1;
    uint32 total_round = 2;
    map<uint32, ChessPlayerInfo> player_info_map = 3;
    uint32 left_monsters = 5;
    uint32 excaped_monsters = 6;
    uint32 max_escapable_monsters = 7;
    ChessMysteryInfo mystery_info = 8;
    repeated ChessCardInfo selected_card_info_list = 9;
    repeated uint32 ban_card_tag_list = 10;
}

message InBattleChessSettleInfo {
    bool is_success = 1;
    repeated ExhibitionDisplayInfo score_list = 2;
    uint32 chess_level = 3;
    uint32 chess_exp = 4;
    uint32 old_chess_level = 5;
    uint32 old_chess_exp = 6;
    uint64 scene_time_ms = 7;
}

message ChessPlayerInfo {
    uint32 uid = 1;
    uint32 building_points = 2;
    uint32 free_refresh_count = 3;
    uint32 free_refresh_limit = 4;
    repeated ChessNormalCardInfo candidate_card_info_list = 5;
    uint32 candidate_index = 6;
    uint32 refresh_cost = 7;
}

message ChessMonsterInfo {
    uint32 monster_id = 1;
    uint32 level = 2;
    repeated uint32 affix_list = 3;
}

message ChessEntranceInfo {
    uint32 entrance_index = 1;
    repeated ChessMonsterInfo monster_info_list = 2;
    uint32 entrance_point_id = 3;
}

message ChessEntranceDetailInfo {
    repeated ChessEntranceInfo info_list = 1;
}

message ChessMysteryInfo {
    map<uint32, uint32> entrance_point_map = 1;
    repeated uint32 exit_point_id_list = 2;
    map<uint32, ChessEntranceDetailInfo> detail_info_map = 3;
}

message ChessNormalCardInfo {
    uint32 card_id = 1;
    uint32 cost_points = 2;
    bool is_attach_curse = 3;
}

message ChessPickCardReq {
    uint32 card_id = 4;
    uint32 card_index = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5310;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ChessPickCardRsp {
    int32 retcode = 4;
    uint32 card_id = 14;
    uint32 card_index = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5366;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ChessPickCardNotify {
    ChessNormalCardInfo normal_card_info = 14;
    uint32 curse_card_id = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5348;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ChessManualRefreshCardsReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5373;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ChessManualRefreshCardsRsp {
    int32 retcode = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5361;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ChessPlayerInfoNotify {
    ChessPlayerInfo player_info = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5388;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ChessLeftMonstersNotify {
    uint32 left_monsters = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5391;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ChessEscapedMonstersNotify {
    uint32 excaped_monsters = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5374;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ChessSelectedCardsNotify {
    repeated ChessCardInfo selected_card_info_list = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5353;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GlobalBuildingInfoNotify {
    repeated BuildingInfo building_list = 4;
    uint32 current_num = 2;
    uint32 max_num = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5339;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message InBattleIrodoriChessInfo {
    uint32 building_points = 1;
    uint32 left_monsters = 2;
    IrodoriChessMysteryInfo mystery_info = 3;
    repeated uint32 selected_card_id_list = 4;
    uint32 settle_score = 5;
}

message IrodoriChessMonsterInfo {
    uint32 monster_id = 1;
    uint32 level = 2;
    repeated uint32 affix_list = 3;
    uint32 grant_points = 4;
}

message IrodoriChessEntranceInfo {
    repeated IrodoriChessMonsterInfo monster_info_list = 1;
    uint32 entrance_point_id = 2;
}

message IrodoriChessEntranceDetailInfo {
    repeated IrodoriChessEntranceInfo info_list = 1;
}

message IrodoriChessMysteryInfo {
    repeated uint32 entrance_point_id_list = 1;
    repeated uint32 exit_point_id_list = 2;
    IrodoriChessEntranceDetailInfo entrance_detail_info = 3;
}

message InBattleIrodoriChessSettleInfo {
    uint32 kill_monster_num = 1;
    uint32 settle_score = 2;
    bool is_new_record = 3;
    uint64 scene_time_ms = 4;
    bool is_activity_end = 5;
    bool is_perfect = 6;
}

message IrodoriChessPlayerInfo {
    uint32 uid = 1;
    uint32 building_points = 2;
    uint32 settle_score = 3;
}

message IrodoriChessPlayerInfoNotify {
    IrodoriChessPlayerInfo player_info = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5395;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message IrodoriChessLeftMonsterNotify {
    uint32 left_monsters = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 5315;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

enum MultistagePlayType {
    MULTISTAGE_PLAY_TYPE_NON = 0;
    MULTISTAGE_PLAY_TYPE_MECHANICUS = 1;
    MULTISTAGE_PLAY_TYPE_FLEUR_FAIR = 2;
    MULTISTAGE_PLAY_TYPE_HIDE_AND_SEEK = 3;
    MULTISTAGE_PLAY_TYPE_BOUNCE_CONJURING = 4;
    MULTISTAGE_PLAY_TYPE_CHESS = 5;
    MULTISTAGE_PLAY_TYPE_IRODORI_CHESS = 6;
}

enum InBattleMechanicusStageType {
    IN_BATTLE_MECHANICUS_STAGE_NONE = 0;
    IN_BATTLE_MECHANICUS_STAGE_BUILD = 1;
    IN_BATTLE_MECHANICUS_STAGE_CARD_FLIP = 2;
    IN_BATTLE_MECHANICUS_STAGE_KILL = 3;
}

enum InBattleMechanicusCardChallengeState {
    IN_BATTLE_MECHANICUS_CARD_CHALLENGE_NONE = 0;
    IN_BATTLE_MECHANICUS_CARD_CHALLENGE_ON_GOING = 1;
    IN_BATTLE_MECHANICUS_CARD_CHALLENGE_FAIL = 2;
    IN_BATTLE_MECHANICUS_CARD_CHALLENGE_SUCCESS = 3;
}

enum HideAndSeekStageType {
    HIDE_AND_SEEK_STAGE_PREPARE = 0;
    HIDE_AND_SEEK_STAGE_PICK = 1;
    HIDE_AND_SEEK_STAGE_GAME = 2;
    HIDE_AND_SEEK_STAGE_HIDE = 3;
    HIDE_AND_SEEK_STAGE_SEEK = 4;
    HIDE_AND_SEEK_STAGE_SETTLE = 5;
}
