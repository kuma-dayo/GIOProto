syntax = "proto3";

package proto;

import "define.proto";
import "cmd/cmd_gallery.proto";
import "cmd/cmd_ugc.proto";
import "cmd/cmd_multistage_play.proto";

message GetActivityScheduleReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2049;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivityScheduleInfo {
    uint32 activity_id = 1;
    bool is_open = 2;
    uint32 schedule_id = 3;
    uint32 begin_time = 4;
    uint32 end_time = 5;
}

message GetActivityScheduleRsp {
    int32 retcode = 5;
    repeated ActivityScheduleInfo activity_schedule_list = 8;
    uint32 remain_fly_sea_lamp_num = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2044;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GetActivityInfoReq {
    repeated uint32 activity_id_list = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2067;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivityInfo {
    uint32 activity_id = 1;
    uint32 schedule_id = 2;
    uint32 begin_time = 3;
    uint32 end_time = 4;
    uint32 activity_type = 5;
    bool is_play_open_anim = 6;
    bool is_finished = 7;
    bool is_starting = 8;
    repeated ActivityWatcherInfo watcher_info_list = 9;
    repeated uint32 meet_cond_list = 10;
    repeated uint32 expire_cond_list = 15;
    uint32 selected_avatar_reward_id = 17;
    map<uint32, uint32> activity_coin_map = 18;
    uint32 score_limit = 19;
    uint32 cur_score = 20;
    repeated uint32 taken_reward_list = 24;
    bool is_hidden = 26;
    uint32 first_day_start_time = 27;
    bool is_banner_cleared = 28;
    bool is_quick_open = 29;
    map<uint32, uint32> wish_gift_num_map = 30;
    
    oneof detail {
        SeaLampActivityDetailInfo sam_lamp_info = 11;
        CrucibleActivityDetailInfo crucible_info = 12;
        SalesmanActivityDetailInfo salesman_info = 13;
        TrialAvatarActivityDetailInfo trial_avatar_info = 14;
        DeliveryActivityDetailInfo delivery_info = 16;
        AsterActivityDetailInfo aster_info = 21;
        FlightActivityDetailInfo flight_info = 25;
        DragonSpineActivityDetailInfo dragon_spine_info = 31;
        EffigyActivityDetailInfo effigy_info = 32;
        TreasureMapActivityDetailInfo treasure_map_info = 35;
        BlessingActivityDetailInfo blessing_info = 41;
        SeaLampActivityInfo sea_lamp_info = 42;
        ExpeditionActivityDetailInfo expedition_info = 43;
        ArenaChallengeActivityDetailInfo arena_challenge_info = 44;
        FleurFairActivityDetailInfo fleur_fair_info = 51;
        WaterSpiritActivityDetailInfo water_spirit_info = 52;
        ChannelerSlabActivityDetailInfo challneler_slab_info = 61;
        MistTrialActivityDetailInfo mist_trial_activity_info = 62;
        HideAndSeekActivityDetailInfo hide_and_seek_info = 63;
        FindHilichurlDetailInfo find_hilichurl_info = 64;
        SummerTimeDetailInfo summer_time_info = 65;
        BuoyantCombatDetailInfo buoyant_combat_info = 66;
        EchoShellDetailInfo echo_shell_info = 67;
        BounceConjuringActivityDetailInfo bounce_conjuring_info = 68;
        BlitzRushActivityDetailInfo blitz_rush_info = 69;
        ChessActivityDetailInfo chess_info = 70;
        SumoActivityDetailInfo sumo_info = 71;
        MoonfinTrialActivityDetailInfo moonfin_trial_info = 72;
        LunaRiteDetailInfo luna_rite_info = 73;
        PlantFlowerActivityDetailInfo plant_flower_info = 74;
        MusicGameActivityDetailInfo music_game_info = 75;
        RoguelikeDungeonActivityDetailInfo roguelike_dungoen_info = 76;
        DigActivityDetailInfo dig_info = 77;
        HachiActivityDetailInfo hachi_info = 78;
        WinterCampActivityDetailInfo winter_camp_info = 79;
        PotionActivityDetailInfo potion_info = 80;
        TanukiTravelActivityDetailInfo tanuki_travel_activity_info = 81;
        LanternRiteActivityDetailInfo lantern_rite_activity_info = 82;
        MichiaeMatsuriActivityDetailInfo michiae_matsuri_info = 83;
        BartenderActivityDetailInfo bartender_info = 84;
        UgcActivityDetailInfo ugc_info = 85;
        CrystalLinkActivityDetailInfo crystal_link_info = 86;
        IrodoriActivityDetailInfo irodori_info = 87;
        PhotoActivityDetailInfo photo_info = 88;
        SpiceActivityDetailInfo spice_info = 89;
        GachaActivityDetailInfo gacha_info = 90;
        LuminanceStoneChallengeActivityDetailInfo luminance_stone_challenge_info = 91;
        RogueDiaryActivityDetailInfo rogue_diary_info = 92;
    }
}

message GetActivityInfoRsp {
    int32 retcode = 13;
    repeated ActivityInfo activity_info_list = 14;
    repeated uint32 activated_sale_id_list = 2;
    repeated Uint32Pair disable_transfer_point_interaction_list = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2144;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ActivityPlayOpenAnimNotify {
    uint32 activity_id = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2146;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivityInfoNotify {
    ActivityInfo activity_info = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2125;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivityScheduleInfoNotify {
    repeated ActivityScheduleInfo activity_schedule_list = 8;
    uint32 remain_fly_sea_lamp_num = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2033;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivityWatcherInfo {
    uint32 watcher_id = 1;
    uint32 cur_progress = 2;
    uint32 total_progress = 3;
    bool is_taken_reward = 4;
}

message ActivityTakeWatcherRewardReq {
    uint32 activity_id = 11;
    uint32 watcher_id = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2090;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivityTakeWatcherRewardRsp {
    int32 retcode = 10;
    uint32 activity_id = 8;
    uint32 watcher_id = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2025;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ActivityUpdateWatcherNotify {
    uint32 activity_id = 10;
    ActivityWatcherInfo watcher_info = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2172;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivitySelectAvatarCardReq {
    uint32 activity_id = 3;
    uint32 reward_id = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2030;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivitySelectAvatarCardRsp {
    int32 retcode = 6;
    uint32 activity_id = 14;
    uint32 reward_id = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2127;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ActivityCoinInfoNotify {
    uint32 schedule_id = 15;
    map<uint32, uint32> activity_coin_map = 1;
    uint32 activity_id = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2094;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SeaLampActivityDetailInfo {
    uint32 phase_id = 1;
    uint32 progress = 2;
    uint32 days = 3;
    uint32 contribution = 4;
    repeated uint32 taken_contribution_reward_list = 5;
    repeated uint32 taken_phase_reward_list = 6;
    uint32 factor = 7;
}

message SeaLampFlyLampReq {
    uint32 item_id = 2;
    uint32 item_num = 10;
    Vector pos = 9;
    int32 param = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2071;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SeaLampFlyLampRsp {
    int32 retcode = 7;
    uint32 item_id = 5;
    uint32 item_num = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2019;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SeaLampTakeContributionRewardReq {
    uint32 activity_id = 15;
    uint32 config_id = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2069;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SeaLampTakeContributionRewardRsp {
    int32 retcode = 14;
    uint32 config_id = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2103;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SeaLampTakePhaseRewardReq {
    uint32 activity_id = 3;
    uint32 phase_id = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2092;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SeaLampTakePhaseRewardRsp {
    int32 retcode = 6;
    uint32 phase_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2160;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SeaLampContributeItemReq {
    uint32 activity_id = 7;
    repeated ItemParam item_list = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2168;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SeaLampContributeItemRsp {
    int32 retcode = 3;
    uint32 total_contribution = 8;
    uint32 add_contribution = 10;
    uint32 add_progress = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2159;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SeaLampSectionInfo {
    uint32 section_id = 1;
}

message SeaLampActivityInfo {
    uint32 day_index = 1;
    uint32 popularity = 2;
    uint32 sea_lamp_coin = 3;
    bool is_content_closed = 4;
    repeated SeaLampSectionInfo section_info_list = 5;
    uint32 mechanicus_id = 6;
    bool is_mechanicus_open = 7;
    uint32 first_day_start_time = 8;
    bool is_mechanicus_feature_close = 9;
}

message SeaLampFlyLampNotify {
    uint32 item_id = 4;
    uint32 item_num = 2;
    Vector pos = 13;
    int32 param = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2051;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SeaLampCoinNotify {
    uint32 sea_lamp_coin = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2096;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SeaLampPopularityNotify {
    uint32 popularity = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2112;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message AnnounceData {
    uint32 config_id = 1;
    uint32 begin_time = 2;
    uint32 end_time = 3;
    string center_system_text = 4;
    string count_down_text = 5;
    string dungeon_confirm_text = 6;
    uint32 center_system_frequency = 7;
    uint32 count_down_frequency = 8;
    bool is_center_system_last_5_every_minutes = 9;
}

message LoadActivityTerrainNotify {
    uint32 activity_id = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2175;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ServerAnnounceNotify {
    repeated AnnounceData announce_data_list = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2029;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ServerAnnounceRevokeNotify {
    repeated uint32 config_id_list = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2141;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ActivityBannerNotify {
    uint32 schedule_id = 7;
    uint32 activity_id = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2186;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ActivityBannerClearReq {
    uint32 schedule_id = 7;
    uint32 activity_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2184;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivityBannerClearRsp {
    int32 retcode = 7;
    uint32 schedule_id = 11;
    uint32 activity_id = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2183;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SalesmanActivityDetailInfo {
    SalesmanStatusType status = 1;
    uint32 day_index = 2;
    uint32 last_deliver_time = 3;
    uint32 deliver_count = 4;
    map<uint32, uint32> selected_reward_id_map = 5;
    uint32 day_reward_id = 6;
    uint32 special_reward_preview_id = 7;
    uint32 cond_day_count = 8;
    bool is_has_taken_special_reward = 9;
    bool is_today_has_delivered = 10;
}

message SalesmanDeliverItemReq {
    uint32 schedule_id = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2118;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SalesmanDeliverItemRsp {
    int32 retcode = 14;
    uint32 schedule_id = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2038;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SalesmanTakeRewardReq {
    uint32 schedule_id = 13;
    uint32 position = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2007;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SalesmanTakeRewardRsp {
    int32 retcode = 2;
    uint32 schedule_id = 10;
    uint32 reward_id = 13;
    uint32 position = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2100;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ActivityCondStateChangeNotify {
    uint32 schedule_id = 10;
    uint32 activity_id = 2;
    repeated uint32 meet_cond_list = 5;
    repeated uint32 expire_cond_list = 3;
    repeated uint32 activated_sale_id_list = 1;
    repeated Uint32Pair disable_transfer_point_interaction_list = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2120;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SalesmanTakeSpecialRewardReq {
    uint32 schedule_id = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2065;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SalesmanTakeSpecialRewardRsp {
    int32 retcode = 9;
    uint32 schedule_id = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2107;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GetAuthSalesmanInfoReq {
    uint32 schedule_id = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2161;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GetAuthSalesmanInfoRsp {
    int32 retcode = 7;
    uint32 schedule_id = 4;
    uint32 day_reward_id = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2039;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TrialAvatarActivityRewardDetailInfo {
    uint32 trial_avatar_index_id = 1;
    bool passed_dungeon = 2;
    bool received_reward = 3;
    uint32 reward_id = 4;
}

message TrialAvatarActivityDetailInfo {
    repeated TrialAvatarActivityRewardDetailInfo reward_info_list = 1;
}

message EnterTrialAvatarActivityDungeonReq {
    uint32 activity_id = 2;
    uint32 trial_avatar_index_id = 12;
    uint32 enter_point_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2057;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message EnterTrialAvatarActivityDungeonRsp {
    int32 retcode = 2;
    uint32 activity_id = 9;
    uint32 trial_avatar_index_id = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2021;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ReceivedTrialAvatarActivityRewardReq {
    uint32 trial_avatar_index_id = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2054;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ReceivedTrialAvatarActivityRewardRsp {
    int32 retcode = 4;
    uint32 activity_id = 15;
    uint32 trial_avatar_index_id = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2199;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TrialAvatarFirstPassDungeonNotify {
    uint32 trial_avatar_index_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2137;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TrialAvatarInDungeonIndexNotify {
    uint32 trial_avatar_index_id = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2024;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message CrucibleBattleUidInfo {
    uint32 uid = 1;
    string nickname = 2;
    uint32 icon = 3;
    string online_id = 4;
    ProfilePicture profile_picture = 5;
}

message CrucibleActivityDetailInfo {
    uint32 cost_time = 1;
    repeated CrucibleBattleUidInfo uid_info_list = 2;
    Vector pos = 3;
    uint32 battle_world_level = 4;
}

message DeliveryActivityDetailInfo {
    uint32 day_index = 1;
    repeated uint32 finished_delivery_quest_index = 2;
    bool is_taken_reward = 3;
}

message TakeDeliveryDailyRewardReq {
    uint32 schedule_id = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2037;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message TakeDeliveryDailyRewardRsp {
    int32 retcode = 7;
    uint32 schedule_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2083;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message FinishDeliveryNotify {
    uint32 schedule_id = 15;
    uint32 day_index = 3;
    uint32 finished_quest_index = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2158;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message AsterLittleDetailInfo {
    bool is_open = 1;
    uint32 stage_id = 2;
    AsterLittleStageState stage_state = 3;
    uint32 begin_time = 4;
    uint32 stage_begin_time = 5;
}

message AsterMidCampInfo {
    uint32 camp_id = 1;
    Vector pos = 2;
}

message AsterMidDetailInfo {
    bool is_open = 1;
    repeated AsterMidCampInfo camp_list = 2;
    uint32 collect_count = 3;
    uint32 begin_time = 4;
}

message AsterLargeDetailInfo {
    bool is_open = 1;
    uint32 begin_time = 2;
}

message AsterProgressDetailInfo {
    uint32 count = 1;
    uint32 last_auto_add_time = 2;
}

message AsterActivityDetailInfo {
    AsterLittleDetailInfo aster_little = 1;
    AsterMidDetailInfo aster_mid = 2;
    AsterLargeDetailInfo aster_large = 3;
    AsterProgressDetailInfo aster_progress = 5;
    uint32 aster_credit = 6;
    uint32 aster_token = 7;
    bool is_special_reward_taken = 8;
    bool is_content_closed = 9;
    uint32 content_close_time = 10;
}

message SelectAsterMidDifficultyReq {
    uint32 schedule_id = 13;
    uint32 gadget_entity_id = 14;
    uint32 difficulty_id = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2190;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SelectAsterMidDifficultyRsp {
    int32 retcode = 2;
    uint32 schedule_id = 14;
    uint32 gadget_entity_id = 8;
    uint32 difficulty_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2010;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message AsterProgressInfoNotify {
    AsterProgressDetailInfo info = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2193;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message AsterLittleInfoNotify {
    AsterLittleDetailInfo info = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2188;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message AsterMidInfoNotify {
    AsterMidDetailInfo info = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2121;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message AsterMiscInfoNotify {
    uint32 aster_credit = 10;
    uint32 aster_token = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2187;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TakeAsterSpecialRewardReq {
    uint32 schedule_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2174;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message TakeAsterSpecialRewardRsp {
    int32 retcode = 12;
    uint32 schedule_id = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2035;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message AsterLargeInfoNotify {
    AsterLargeDetailInfo info = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2192;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message FlightDailyRecord {
    bool is_touched = 1;
    uint32 best_score = 2;
    uint32 start_time = 3;
    repeated uint32 watcher_id_list = 4;
    uint32 group_id = 5;
}

message FlightActivityDetailInfo {
    repeated FlightDailyRecord daily_record_list = 1;
    uint32 preview_reward_id = 2;
    uint32 min_open_player_level = 3;
}

message FlightActivitySettleNotify {
    bool is_success = 6;
    uint32 left_time = 12;
    uint32 collect_num = 5;
    uint32 total_num = 4;
    uint32 score = 10;
    bool is_new_record = 14;
    uint32 medal_level = 2;
    uint32 group_id = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2084;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message FlightActivityRestartReq {
    uint32 schedule_id = 10;
    uint32 group_id = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2164;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message FlightActivityRestartRsp {
    int32 retcode = 13;
    uint32 schedule_id = 6;
    uint32 group_id = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2002;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message AsterMidCampInfoNotify {
    repeated AsterMidCampInfo camp_list = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2020;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message DragonSpineActivityDetailInfo {
    repeated DragonSpineChapterInfo chapter_info_list = 1;
    uint32 weapon_enhance_level = 2;
    uint32 shimmering_essence = 3;
    uint32 warm_essence = 4;
    uint32 wondrous_essence = 5;
    bool is_content_closed = 6;
    uint32 content_finish_time = 7;
}

message DragonSpineChapterInfo {
    uint32 chapter_id = 1;
    bool is_open = 2;
    uint32 progress = 3;
    uint32 finished_mission_num = 4;
    uint32 open_time = 5;
}

message DragonSpineChapterOpenNotify {
    uint32 schedule_id = 5;
    uint32 chapter_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2119;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message DragonSpineChapterProgressChangeNotify {
    uint32 schedule_id = 9;
    uint32 chapter_id = 12;
    uint32 cur_progress = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2102;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message DragonSpineChapterFinishNotify {
    uint32 schedule_id = 4;
    uint32 chapter_id = 1;
    uint32 weapon_enhance_level = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2135;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message DragonSpineCoinChangeNotify {
    uint32 schedule_id = 2;
    uint32 shimmering_essence = 14;
    uint32 warm_essence = 10;
    uint32 wondrous_essence = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2031;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ActivitySaleChangeNotify {
    uint32 sale_id = 6;
    bool is_close = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2109;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message EffigyDailyInfo {
    uint32 day_index = 1;
    uint32 begin_time = 2;
    uint32 challenge_id = 3;
    uint32 challenge_count = 4;
    uint32 challenge_max_score = 5;
    bool is_first_pass_reward_taken = 6;
    uint32 challenge_total_score = 7;
}

message EffigyActivityDetailInfo {
    repeated EffigyDailyInfo daily_info_list = 1;
    uint32 last_difficulty_id = 2;
    uint32 cur_score = 3;
    repeated uint32 taken_reward_index_list = 4;
}

message StartEffigyChallengeReq {
    uint32 challenge_id = 2;
    uint32 difficulty_id = 4;
    repeated uint32 condition_id_list = 1;
    uint32 point_id = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2157;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message StartEffigyChallengeRsp {
    int32 retcode = 4;
    uint32 challenge_id = 15;
    uint32 difficulty_id = 8;
    repeated uint32 condition_id_list = 9;
    uint32 point_id = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2008;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message EffigyChallengeInfoNotify {
    uint32 challenge_id = 8;
    uint32 difficulty_id = 15;
    repeated uint32 condition_id_list = 13;
    uint32 challenge_score = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2153;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message EffigyChallengeDungeonResultInfo {
    uint32 challenge_id = 1;
    bool is_success = 2;
    uint32 challenge_score = 3;
    uint32 challenge_max_score = 4;
    bool is_in_time_limit = 5;
}

message EffigyChallengeResultNotify {
    uint32 challenge_id = 8;
    bool is_success = 9;
    uint32 challenge_score = 1;
    uint32 challenge_max_score = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2064;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TakeEffigyFirstPassRewardReq {
    uint32 challenge_id = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2200;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message TakeEffigyFirstPassRewardRsp {
    int32 retcode = 12;
    uint32 challenge_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2073;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TakeEffigyRewardReq {
    uint32 reward_index = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2062;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message TakeEffigyRewardRsp {
    int32 retcode = 10;
    uint32 reward_index = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2110;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SelectEffigyChallengeConditionReq {
    uint32 challenge_id = 1;
    uint32 difficulty_id = 13;
    repeated uint32 condition_id_list = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2111;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SelectEffigyChallengeConditionRsp {
    int32 retcode = 4;
    uint32 challenge_id = 9;
    uint32 difficulty_id = 13;
    repeated uint32 condition_id_list = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2068;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RestartEffigyChallengeReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2023;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message RestartEffigyChallengeRsp {
    int32 retcode = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2133;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TreasureMapRegionInfo {
    uint32 region_id = 1;
    uint32 start_time = 3;
    Vector region_center_pos = 4;
    uint32 region_radius = 5;
    uint32 current_progress = 6;
    uint32 goal_points = 7;
    uint32 scene_id = 8;
    bool is_find_mp_spot = 9;
    bool is_done_mp_spot = 10;
}

message TreasureMapBonusChallengeInfo {
    uint32 config_id = 1;
    bool is_active = 2;
    bool is_done = 3;
    map<uint32, bool> fragment_map = 4;
    uint32 solution_id = 5;
}

message TreasureMapActivityDetailInfo {
    repeated TreasureMapRegionInfo region_info_list = 1;
    uint32 active_region_index = 2;
    uint32 treasure_close_time = 3;
    uint32 preview_reward_id = 4;
    uint32 min_open_player_level = 5;
    uint32 currency_num = 6;
    repeated TreasureMapBonusChallengeInfo bonus_challenge_list = 7;
    bool is_mp_challenge_touched = 8;
    uint32 total_mp_spot_num = 9;
}

message TreasureMapRegionInfoNotify {
    TreasureMapRegionInfo region_info = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2106;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TreasureMapCurrencyNotify {
    uint32 currency_num = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2098;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TreasureMapRegionActiveNotify {
    uint32 active_region_index = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2059;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TreasureMapMpChallengeNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2036;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TreasureMapBonusChallengeNotify {
    TreasureMapBonusChallengeInfo info = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2075;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TreasureMapGuideTaskDoneNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2088;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TreasureMapPreTaskDoneNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2055;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BlessingActivityDetailInfo {
    bool is_activated = 1;
    bool is_content_closed = 2;
    uint32 cur_day_scan_type = 3;
    uint32 cur_day_scan_num = 4;
    map<uint32, uint32> pic_num_map = 5;
    uint32 redeem_reward_num = 6;
    uint32 next_refresh_time = 7;
    uint32 content_close_time = 8;
}

message BlessingScanReq {
    uint32 entity_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2012;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message BlessingScanRsp {
    int32 retcode = 8;
    uint32 scan_pic_id = 13;
    uint32 cur_day_scan_num = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2032;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BlessingRedeemRewardReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2128;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message BlessingRedeemRewardRsp {
    int32 retcode = 11;
    map<uint32, uint32> pic_num_map = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2170;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BlessingFriendPicData {
    uint32 uid = 1;
    uint32 avatar_id = 2;
    string signature = 3;
    string nickname = 4;
    map<uint32, uint32> pic_num_map = 5;
    string remark_name = 6;
    ProfilePicture profile_picture = 7;
}

message BlessingRecvPicRecord {
    uint32 uid = 1;
    uint32 avatar_id = 2;
    string nickname = 3;
    string signature = 4;
    uint32 pic_id = 5;
    bool is_recv = 6;
    uint32 index = 7;
    string remark_name = 8;
    ProfilePicture profile_picture = 9;
}

message BlessingGetFriendPicListReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2081;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message BlessingGetFriendPicListRsp {
    int32 retcode = 7;
    repeated BlessingFriendPicData friend_pic_data_list = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2015;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BlessingGiveFriendPicReq {
    uint32 uid = 12;
    uint32 pic_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2009;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message BlessingGiveFriendPicRsp {
    int32 retcode = 5;
    uint32 uid = 15;
    uint32 pic_id = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2104;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BlessingAcceptGivePicReq {
    uint32 uid = 7;
    uint32 index = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2006;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message BlessingAcceptGivePicRsp {
    int32 retcode = 3;
    uint32 uid = 9;
    uint32 index = 14;
    uint32 pic_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2048;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BlessingGetAllRecvPicRecordListReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2076;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message BlessingGetAllRecvPicRecordListRsp {
    int32 retcode = 10;
    repeated BlessingRecvPicRecord recv_pic_record_list = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2013;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BlessingRecvFriendPicNotify {
    uint32 pic_id = 9;
    uint32 uid = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2134;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BlessingAcceptAllGivePicReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2123;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message BlessingAcceptAllGivePicRsp {
    int32 retcode = 2;
    map<uint32, uint32> accept_pic_num_map = 4;
    repeated uint32 accept_index_list = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2180;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ExpeditionPathInfo {
    uint32 path_id = 1;
    ExpeditionState state = 2;
    uint32 start_time = 3;
    repeated uint32 avatar_id_list = 4;
    uint32 assist_uid = 5;
    uint32 assist_avatar_id = 6;
    uint32 mark_id = 7;
    float bonus_probability = 8;
    uint32 challenge_id = 9;
    uint32 assist_costume_id = 10;
}

message ExpeditionChallengeInfo {
    uint32 id = 1;
    uint32 open_time = 2;
    bool is_finished = 3;
}

message ExpeditionActivityDetailInfo {
    repeated ExpeditionPathInfo path_info_list = 1;
    uint32 expedition_count = 2;
    repeated ExpeditionChallengeInfo challenge_info_list = 3;
    bool is_content_closed = 4;
    uint32 content_close_time = 5;
    uint32 cur_challenge_id = 6;
}

message ExpeditionStartReq {
    uint32 path_id = 15;
    repeated uint32 avatar_id_list = 12;
    uint32 assist_uid = 3;
    uint32 assist_avatar_id = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2026;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ExpeditionStartRsp {
    int32 retcode = 6;
    uint32 path_id = 10;
    repeated uint32 avatar_id_list = 12;
    uint32 assist_uid = 8;
    uint32 assist_avatar_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2163;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ExpeditionRecallReq {
    uint32 path_id = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2122;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ExpeditionRecallRsp {
    int32 retcode = 8;
    uint32 path_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2156;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ExpeditionTakeRewardReq {
    uint32 path_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2173;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ExpeditionTakeRewardRsp {
    int32 retcode = 11;
    uint32 path_id = 6;
    bool is_bonus = 2;
    uint32 reward_level = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2196;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ExpeditionAssistInfo {
    uint32 avatar_id = 1;
    uint32 assist_time = 2;
    string target_nick_name = 3;
    string online_id = 4;
    uint32 costume_id = 5;
}

message GetExpeditionAssistInfoListReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2181;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GetExpeditionAssistInfoListRsp {
    int32 retcode = 5;
    repeated ExpeditionAssistInfo assist_info_list = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2045;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SetCurExpeditionChallengeIdReq {
    uint32 id = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2130;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SetCurExpeditionChallengeIdRsp {
    int32 retcode = 2;
    uint32 id = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2093;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ExpeditionChallengeEnterRegionNotify {
    bool is_puzzle_finished = 5;
    uint32 id = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2050;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ExpeditionChallengeFinishedNotify {
    uint32 id = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2034;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message WaterSpiritActivityDetailInfo {
    uint32 region_search_id = 1;
    uint32 mp_play_id = 2;
    map<uint32, uint32> search_time_map = 3;
}

message FleurFairChapterInfo {
    uint32 chapter_id = 1;
    uint32 open_time = 2;
}

message FleurFairBalloonInfo {
    uint32 best_score = 1;
}

message FleurFairFallInfo {
    uint32 best_score = 1;
}

message FleurFairMusicRecord {
    uint32 max_score = 1;
    uint32 max_combo = 2;
    bool is_unlock = 3;
}

message FleurFairMusicGameInfo {
    map<uint32, FleurFairMusicRecord> music_record_map = 1;
}

message FleurFairMinigameInfo {
    uint32 minigame_id = 1;
    uint32 open_time = 2;
    bool is_open = 3;
    
    oneof detail {
        FleurFairBalloonInfo balloon_info = 11;
        FleurFairFallInfo fall_info = 12;
        FleurFairMusicGameInfo music_info = 13;
    }
}

message FleurFairDungeonSectionInfo {
    uint32 section_id = 1;
    uint32 open_time = 2;
    bool is_open = 3;
}

message FleurFairActivityDetailInfo {
    repeated FleurFairChapterInfo chapter_info_list = 1;
    bool is_content_closed = 2;
    uint32 content_close_time = 3;
    map<uint32, FleurFairMinigameInfo> minigame_info_map = 4;
    map<uint32, FleurFairDungeonSectionInfo> dungeon_section_info_map = 5;
    bool is_dungeon_unlocked = 6;
    uint32 dungeon_punish_over_time = 7;
    uint32 obtained_token = 8;
}

message FleurFairBalloonSettleInfo {
    BalloonSettleInfo settle_info = 1;
    bool is_new_record = 2;
}

message FleurFairFallSettleInfo {
    FallSettleInfo settle_info = 1;
    bool is_new_record = 2;
}

message FleurFairBalloonSettleNotify {
    map<uint32, FleurFairBalloonSettleInfo> settle_info_map = 2;
    uint32 minigame_id = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2139;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message FleurFairFallSettleNotify {
    map<uint32, FleurFairFallSettleInfo> settle_info_map = 12;
    uint32 minigame_id = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2097;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message FleurFairMusicGameSettleReq {
    uint32 music_basic_id = 13;
    uint32 score = 6;
    uint32 combo = 12;
    uint32 correct_hit = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2115;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message FleurFairMusicGameSettleRsp {
    int32 retcode = 11;
    uint32 music_basic_id = 12;
    bool is_unlock_next_level = 4;
    bool is_new_record = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2124;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message FleurFairMusicGameStartReq {
    uint32 music_basic_id = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2171;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message FleurFairMusicGameStartRsp {
    int32 retcode = 5;
    uint32 music_basic_id = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2149;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message FleurFairReplayMiniGameReq {
    uint32 minigame_id = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2152;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message FleurFairReplayMiniGameRsp {
    int32 retcode = 2;
    uint32 minigame_id = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2101;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ArenaChallengeMonsterLevel {
    uint32 arena_challenge_id = 1;
    uint32 arena_challenge_level = 2;
    uint32 monster_level = 3;
}

message ArenaChallengeActivityDetailInfo {
    uint32 world_level = 1;
    repeated ArenaChallengeMonsterLevel level_list = 2;
    map<uint32, uint32> level_open_time_map = 3;
}

message StartArenaChallengeLevelReq {
    uint32 gadget_entity_id = 14;
    uint32 arena_challenge_id = 9;
    uint32 arena_challenge_level = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2154;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message StartArenaChallengeLevelRsp {
    int32 retcode = 9;
    uint32 gadget_entity_id = 11;
    uint32 arena_challenge_id = 2;
    uint32 arena_challenge_level = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2191;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ArenaChallengeChildChallengeInfo {
    uint32 challenge_index = 1;
    uint32 challenge_id = 2;
    uint32 challenge_type = 3;
    bool is_success = 4;
    bool is_settled = 5;
}

message ArenaChallengeFinishNotify {
    uint32 arena_challenge_id = 15;
    uint32 arena_challenge_level = 3;
    bool is_success = 5;
    repeated ArenaChallengeChildChallengeInfo child_challenge_list = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2082;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message WaterSpritePhaseFinishNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2028;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ActivityTakeWatcherRewardBatchReq {
    uint32 activity_id = 14;
    repeated uint32 watcher_id_list = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2079;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivityTakeWatcherRewardBatchRsp {
    int32 retcode = 1;
    uint32 activity_id = 3;
    repeated uint32 watcher_id_list = 9;
    repeated ItemParam item_list = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2150;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ChannelerSlabCamp {
    uint32 group_id = 1;
    uint32 reward_id = 2;
    Vector pos = 3;
    uint32 buff_num = 4;
}

message ChannelerSlabChallenge {
    repeated ChannelerSlabCamp camp_list = 1;
    uint32 active_camp_index = 2;
}

message ChannelerSlabOneoffDungeon {
    uint32 dungeon_id = 1;
    bool is_done = 2;
    uint32 reward_id = 3;
}

message ChannelerSlabChallengeStage {
    uint32 stage_id = 1;
    uint32 open_time = 2;
    repeated ChannelerSlabChallenge challenge_list = 3;
    ChannelerSlabOneoffDungeon dungeon_info = 4;
    bool is_open = 5;
}

message ChannellerSlabBuffSchemeInfo {
    map<uint32, uint32> slot_map = 1;
    uint32 total_energy = 2;
    uint32 self_energy = 3;
}

message ChannellerSlabAssistInfo {
    uint32 uid = 1;
    uint32 avatar_id = 2;
    uint32 avatar_level = 3;
}

message ChannellerSlabBuffInfo {
    repeated uint32 buff_id_list = 1;
    ChannellerSlabBuffSchemeInfo single_buff_scheme_info = 2;
    ChannellerSlabBuffSchemeInfo mp_buff_scheme_info = 3;
    repeated ChannellerSlabAssistInfo assist_info_list = 4;
}

message ChannellerSlabLoopDungeonInfo {
    uint32 dungeon_index = 1;
    uint32 score = 2;
    bool is_first_pass_reward_taken = 3;
    repeated uint32 last_condition_id_list = 4;
    uint32 open_time = 5;
    bool is_open = 6;
}

message ChannellerSlabLoopDungeonStageInfo {
    repeated ChannellerSlabLoopDungeonInfo dungeon_info_list = 1;
    uint32 last_difficulty_id = 2;
    repeated uint32 taken_reward_index_list = 3;
    uint32 open_time = 4;
    bool is_open = 5;
}

message ChannelerSlabActivityDetailInfo {
    repeated ChannelerSlabChallengeStage stage_list = 1;
    uint32 play_end_time = 2;
    ChannellerSlabBuffInfo buff_info = 3;
    ChannellerSlabLoopDungeonStageInfo loop_dungeon_stage_info = 4;
}

message ChannelerSlabStageActiveChallengeIndexNotify {
    uint32 stage_id = 9;
    uint32 challenge_index = 5;
    uint32 active_camp_index = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8864;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ChannelerSlabStageOneoffDungeonNotify {
    uint32 stage_id = 5;
    bool is_done = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8522;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ChannellerSlabWearBuffReq {
    uint32 buff_id = 2;
    uint32 slot_id = 13;
    bool is_mp = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8132;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ChannellerSlabWearBuffRsp {
    int32 retcode = 8;
    uint32 buff_id = 1;
    uint32 slot_id = 11;
    bool is_mp = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8315;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ChannellerSlabTakeoffBuffReq {
    uint32 buff_id = 3;
    uint32 slot_id = 14;
    bool is_mp = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8577;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ChannellerSlabTakeoffBuffRsp {
    int32 retcode = 2;
    uint32 buff_id = 15;
    uint32 slot_id = 13;
    bool is_mp = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8689;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ChannellerSlabEnterLoopDungeonReq {
    uint32 dungeon_index = 5;
    uint32 difficulty_id = 8;
    repeated uint32 condition_id_list = 4;
    uint32 point_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8687;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ChannellerSlabEnterLoopDungeonRsp {
    int32 retcode = 10;
    uint32 dungeon_index = 13;
    uint32 difficulty_id = 1;
    repeated uint32 condition_id_list = 5;
    uint32 point_id = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8639;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ChannellerSlabLoopDungeonTakeFirstPassRewardReq {
    uint32 dungeon_index = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8910;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ChannellerSlabLoopDungeonTakeFirstPassRewardRsp {
    int32 retcode = 13;
    uint32 dungeon_index = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8482;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ChannellerSlabLoopDungeonTakeScoreRewardReq {
    uint32 reward_index = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8305;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ChannellerSlabLoopDungeonTakeScoreRewardRsp {
    int32 retcode = 11;
    uint32 reward_index = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8552;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ChannellerSlabLoopDungeonChallengeInfoNotify {
    uint32 dungeon_index = 3;
    uint32 difficulty_id = 14;
    repeated uint32 condition_id_list = 11;
    uint32 challenge_score = 5;
    repeated uint32 scheme_buff_id_list = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8555;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ChannellerSlabLoopDungeonSelectConditionReq {
    uint32 dungeon_index = 4;
    uint32 difficulty_id = 13;
    repeated uint32 condition_id_list = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8383;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ChannellerSlabLoopDungeonSelectConditionRsp {
    int32 retcode = 6;
    uint32 dungeon_index = 15;
    uint32 difficulty_id = 7;
    repeated uint32 condition_id_list = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8979;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ChannellerSlabLoopDungeonResultInfo {
    uint32 dungeon_index = 1;
    bool is_success = 2;
    uint32 challenge_score = 3;
    uint32 challenge_max_score = 4;
    bool is_in_time_limit = 5;
}

message ChannellerSlabOneOffDungeonInfoReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8295;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ChannellerSlabOneOffDungeonInfoRsp {
    int32 retcode = 2;
    repeated uint32 scheme_buff_id_list = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8716;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ChannellerSlabOneOffDungeonInfoNotify {
    repeated uint32 scheme_buff_id_list = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8008;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ChannellerSlabSaveAssistInfoReq {
    repeated ChannellerSlabAssistInfo assist_info_list = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8860;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ChannellerSlabSaveAssistInfoRsp {
    int32 retcode = 6;
    repeated ChannellerSlabAssistInfo assist_info_list = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8320;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MistTrialLevelData {
    uint32 level_id = 1;
    bool is_open = 2;
    uint32 open_time = 3;
}

message MistTrialActivityDetailInfo {
    repeated MistTrialLevelData trial_level_data_list = 1;
}

message MistTrialSelectAvatarAndEnterDungeonReq {
    repeated uint32 select_trial_avatar_id_list = 6;
    uint32 trial_id = 11;
    uint32 enter_point_id = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8318;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message MistTrialSelectAvatarAndEnterDungeonRsp {
    int32 retcode = 15;
    uint32 trial_id = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8403;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MistTrialMissionInfo {
    uint32 watcher_list_id = 1;
    uint32 param = 2;
}

message MistTrialGetChallengeMissionReq {
    uint32 trial_id = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8668;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message MistTrialGetChallengeMissionRsp {
    int32 retcode = 3;
    uint32 trial_id = 1;
    repeated MistTrialMissionInfo mission_info_list = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8385;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MistTrialDunegonFailNotify {
    int32 dungeon_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8580;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ChannellerSlabCheckEnterLoopDungeonReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8304;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ChannellerSlabCheckEnterLoopDungeonRsp {
    int32 retcode = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8928;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message HideAndSeekMapInfo {
    uint32 id = 1;
    repeated uint32 match_lock_reason_list = 2;
}

message HideAndSeekActivityDetailInfo {
    repeated uint32 chosen_hunter_skill_list = 1;
    repeated uint32 chosen_hider_skill_list = 2;
    repeated uint32 unlock_map_list = 3;
    repeated HideAndSeekMapInfo open_map_info_list = 4;
}

message HideAndSeekSelectSkillReq {
    repeated uint32 skill_list = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8307;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message HideAndSeekSelectSkillRsp {
    int32 retcode = 14;
    repeated uint32 skill_list = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8227;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ActivityTakeScoreRewardReq {
    uint32 activity_id = 10;
    uint32 reward_config_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8321;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivityTakeScoreRewardRsp {
    int32 retcode = 5;
    uint32 activity_id = 4;
    uint32 reward_config_id = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8218;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ActivityTakeAllScoreRewardReq {
    uint32 activity_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8424;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivityTakeAllScoreRewardRsp {
    int32 retcode = 1;
    uint32 activity_id = 13;
    repeated uint32 reward_config_list = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8692;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message FindHilichurlDayContentInfo {
    uint32 start_time = 1;
}

message FindHilichurlDetailInfo {
    uint32 day_index = 1;
    uint32 player_day_index = 2;
    repeated FindHilichurlDayContentInfo day_content_info_list = 3;
    bool is_content_closed = 4;
    uint32 content_close_time = 5;
    uint32 min_open_player_level = 6;
    bool is_end_quest_accept = 7;
}

message CommonPlayerTipsNotify {
    repeated string text_map_id_list = 11;
    uint32 notify_type = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8490;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message FindHilichurlFinishSecondQuestNotify {
    uint32 day_index = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8981;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message FindHilichurlAcceptQuestNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8465;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SummerTimeSprintBoatRecord {
    bool is_touched = 1;
    uint32 best_score = 2;
    uint32 start_time = 3;
    repeated uint32 watcher_id_list = 4;
    uint32 group_id = 5;
}

message SummerTimeSprintBoatInfo {
    repeated SummerTimeSprintBoatRecord record_list = 1;
}

message SummerTimeDetailInfo {
    map<uint32, SummerTimeStageInfo> stage_map = 1;
    bool is_content_closed = 2;
    uint32 content_close_time = 3;
    SummerTimeSprintBoatInfo sprint_boat_info = 4;
}

message SummerTimeStageInfo {
    uint32 stage_id = 1;
    bool is_open = 2;
    uint32 open_time = 3;
}

message SummerTimeFloatSignalPositionNotify {
    uint32 float_signal_id = 9;
    Vector position = 13;
    bool is_transfer_anchor = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8622;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SummerTimeFloatSignalUpdateNotify {
    uint32 float_signal_id = 2;
    Vector position = 15;
    bool is_transfer_anchor = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8333;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SummerTimeSprintBoatSettleNotify {
    bool is_success = 1;
    uint32 left_time = 7;
    uint32 collect_num = 13;
    uint32 total_num = 11;
    uint32 score = 8;
    bool is_new_record = 15;
    uint32 medal_level = 9;
    uint32 group_id = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8117;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SummerTimeSprintBoatRestartReq {
    uint32 schedule_id = 15;
    uint32 group_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8175;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SummerTimeSprintBoatRestartRsp {
    int32 retcode = 3;
    uint32 schedule_id = 2;
    uint32 group_id = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8563;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BuoyantCombatDailyInfo {
    uint32 best_score = 1;
    uint32 start_time = 2;
}

message BuoyantCombatDetailInfo {
    repeated BuoyantCombatDailyInfo daily_info_list = 1;
}

message StartBuoyantCombatGalleryReq {
    uint32 gallery_id = 12;
    uint32 gallery_level = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 9000;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message StartBuoyantCombatGalleryRsp {
    int32 retcode = 7;
    uint32 gallery_id = 8;
    uint32 gallery_level = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8364;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BuoyantCombatSettleInfo {
    BuoyantCombatGallerySettleInfo settle_info = 1;
    bool is_new_record = 2;
}

message BuoyantCombatSettleNotify {
    BuoyantCombatSettleInfo settle_info = 10;
    uint32 gallery_id = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8347;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SetLimitOptimizationNotify {
    bool is_active = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8194;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message EchoShellDetailInfo {
    repeated uint32 taken_reward_list = 1;
    repeated uint32 shell_list = 2;
}

message EchoShellUpdateNotify {
    uint32 shell_id = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8077;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message EchoShellTakeRewardReq {
    uint32 reward_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8074;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message EchoShellTakeRewardRsp {
    int32 retcode = 14;
    uint32 reward_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8446;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BounceConjuringChapterInfo {
    uint32 chapter_id = 1;
    uint32 best_score = 2;
    uint32 open_time = 3;
}

message BounceConjuringActivityDetailInfo {
    repeated BounceConjuringChapterInfo chapter_info_list = 1;
    uint32 content_close_time = 2;
    bool is_content_closed = 3;
}

message BounceConjuringSettleNotify {
    map<uint32, BounceConjuringGallerySettleInfo> settle_info_map = 13;
    bool is_new_record = 10;
    uint32 total_score = 7;
    uint32 chapter_id = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8313;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BlitzRushStage {
    uint32 open_time = 1;
    bool is_open = 2;
}

message ParkourLevelInfo {
    uint32 open_time = 1;
    uint32 best_record = 2;
    bool is_open = 3;
    Vector pos = 4;
}

message BlitzRushActivityDetailInfo {
    repeated BlitzRushStage stage_list = 1;
    uint32 content_close_time = 2;
    repeated ParkourLevelInfo parkour_level_info_list = 3;
    bool is_content_closed = 4;
}

message BlitzRushParkourRestartReq {
    uint32 schedule_id = 4;
    uint32 group_id = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8355;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message BlitzRushParkourRestartRsp {
    int32 retcode = 9;
    uint32 schedule_id = 10;
    uint32 group_id = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8943;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ChessActivityDetailInfo {
    uint32 level = 1;
    uint32 exp = 2;
    bool is_teach_dungeon_finished = 3;
    uint32 obtained_exp = 4;
    uint32 available_exp = 5;
    repeated uint32 finished_map_id_list = 6;
    uint32 punish_over_time = 7;
    uint32 content_close_time = 8;
    bool is_content_closed = 9;
}

message EnterChessDungeonReq {
    uint32 map_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8571;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message EnterChessDungeonRsp {
    int32 retcode = 10;
    uint32 map_id = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8819;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TreasureMapHostInfoNotify {
    repeated uint32 mp_challenge_region_list = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8206;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SumoActivityDetailInfo {
    map<uint32, SumoStageData> sumo_stage_map = 1;
    uint32 difficulty_id = 2;
    uint32 last_stage_id = 3;
}

message SumoAvatarInfo {
    bool is_trial = 1;
    uint64 avatar_id = 2;
}

message SumoTeamData {
    repeated SumoAvatarInfo avatar_info_list = 1;
    repeated uint32 skill_id_list = 2;
}

message SumoStageData {
    uint32 stage_id = 1;
    uint32 max_score = 2;
    uint32 open_time = 3;
    bool is_open = 4;
    repeated SumoTeamData team_list = 5;
}

message SumoSaveTeamReq {
    uint32 activity_id = 13;
    uint32 stage_id = 9;
    uint32 difficulty_id = 11;
    repeated SumoTeamData team_list = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8970;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SumoSaveTeamRsp {
    int32 retcode = 1;
    uint32 activity_id = 3;
    uint32 stage_id = 2;
    uint32 difficulty_id = 9;
    repeated SumoTeamData team_list = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8890;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SumoSelectTeamAndEnterDungeonReq {
    uint32 activity_id = 6;
    uint32 stage_id = 4;
    uint32 difficulty_id = 11;
    repeated SumoTeamData team_list = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8030;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SumoSelectTeamAndEnterDungeonRsp {
    int32 retcode = 13;
    uint32 activity_id = 7;
    uint32 stage_id = 8;
    uint32 difficulty_id = 15;
    repeated SumoTeamData team_list = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8915;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SumoDungeonSettleNotify {
    uint32 stage_id = 6;
    uint32 difficulty_id = 4;
    uint32 final_score = 5;
    bool is_new_record = 2;
    uint32 kill_monster_num = 8;
    uint32 kill_elite_monster_num = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8426;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SumoDungeonAvatar {
    uint64 avatar_guid = 1;
    bool is_trial = 2;
    bool is_avlive = 3;
}

message SumoDungeonTeam {
    repeated SumoDungeonAvatar dungeon_avatar_list = 1;
}

message SumoEnterDungeonNotify {
    uint32 activity_id = 4;
    uint32 stage_id = 9;
    repeated SumoDungeonTeam dungeon_team_list = 14;
    uint32 cur_team_index = 11;
    uint32 next_valid_switch_time = 1;
    uint32 no_switch_punish_time = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8727;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SumoSwitchTeamReq {
    uint32 activity_id = 2;
    uint32 stage_id = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8400;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SumoSwitchTeamRsp {
    int32 retcode = 8;
    uint32 activity_id = 4;
    uint32 stage_id = 9;
    uint32 cur_team_index = 7;
    repeated SumoDungeonTeam dungeon_team_list = 6;
    uint32 next_valid_switch_time = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8442;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SumoLeaveDungeonNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8440;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SumoRestartDungeonReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8585;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SumoRestartDungeonRsp {
    int32 retcode = 4;
    uint32 point_id = 3;
    uint32 dungeon_id = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8628;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ActivityDisableTransferPointInteractionNotify {
    Uint32Pair scene_point_pair = 4;
    bool is_disable = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8686;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SumoSetNoSwitchPunishTimeNotify {
    uint32 activity_id = 13;
    uint32 stage_id = 10;
    repeated SumoDungeonTeam dungeon_team_list = 9;
    uint32 cur_team_index = 3;
    uint32 next_valid_switch_time = 15;
    uint32 no_switch_punish_time = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8269;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MoonfinTrialLevelInfo {
    uint32 best_record = 1;
    uint32 open_time = 2;
}

message MoonfinTrialActivityDetailInfo {
    map<uint32, MoonfinTrialLevelInfo> level_info_map = 1;
    uint32 special_fish_count = 2;
}

message FishingGallerySettleNotify {
    FishingGallerySettleInfo settle_info = 4;
    uint32 gallery_id = 2;
    uint32 level_id = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8896;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message LunaRiteHintPoint {
    uint32 index = 1;
    uint32 area_id = 2;
    Vector pos = 3;
    LunaRiteHintPointType type = 4;
}

message LunaRiteAreaInfo {
    uint32 area_id = 1;
    uint32 challenge_index = 2;
    repeated uint32 sacrifice_list = 3;
    repeated uint32 sacrifice_reward_list = 4;
    LunaRiteHintStatusType hint_status = 5;
}

message LunaRiteDetailInfo {
    repeated LunaRiteAreaInfo area_info_list = 1;
    repeated LunaRiteHintPoint hint_point = 2;
}

message LunaRiteSacrificeReq {
    uint32 area_id = 8;
    uint32 index = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8062;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message LunaRiteSacrificeRsp {
    int32 retcode = 11;
    uint32 area_id = 6;
    uint32 index = 7;
    repeated uint32 sacrifice_list = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8401;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message LunaRiteTakeSacrificeRewardReq {
    uint32 area_id = 13;
    uint32 index = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8669;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message LunaRiteTakeSacrificeRewardRsp {
    int32 retcode = 14;
    uint32 area_id = 7;
    uint32 index = 5;
    repeated uint32 sacrifice_reward_list = 2;
    uint32 sacrifice_reward_index = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8252;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message LunaRiteHintPointReq {
    uint32 area_id = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8342;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message LunaRiteHintPointRsp {
    int32 retcode = 15;
    uint32 area_id = 2;
    repeated LunaRiteHintPoint hint_point = 8;
    LunaRiteHintStatusType hint_status = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8481;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message LunaRiteHintPointRemoveNotify {
    repeated uint32 hint_point_index = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8420;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message LunaRiteGroupBundleRegisterNotify {
    uint32 group_link_bundle_id = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8327;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message LunaRiteAreaFinishNotify {
    uint32 area_id = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8107;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PlantFlowerActivityDetailInfo {
    uint32 day_index = 1;
    uint32 today_seed_reward_id = 2;
    bool is_today_has_awarded = 3;
    bool is_content_closed = 4;
    map<uint32, uint32> wish_flower_num_map = 5;
    map<uint32, uint32> used_flower_num_map = 6;
}

message PlantFlowerGetSeedInfoReq {
    uint32 schedule_id = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8913;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PlantFlowerGetSeedInfoRsp {
    int32 retcode = 8;
    uint32 schedule_id = 12;
    uint32 seed_reward_id = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8932;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlantFlowerTakeSeedRewardReq {
    uint32 schedule_id = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8182;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PlantFlowerTakeSeedRewardRsp {
    int32 retcode = 12;
    uint32 schedule_id = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8386;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlantFlowerSetFlowerWishReq {
    uint32 schedule_id = 11;
    map<uint32, uint32> flower_num_map = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8650;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PlantFlowerSetFlowerWishRsp {
    int32 retcode = 2;
    uint32 schedule_id = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8588;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlantFlowerGetFriendFlowerWishListReq {
    uint32 schedule_id = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8840;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PlantFlowerFriendFlowerWishData {
    uint32 uid = 1;
    ProfilePicture profile_picture = 2;
    string nickname = 3;
    map<uint32, uint32> flower_num_map = 4;
}

message PlantFlowerGetFriendFlowerWishListRsp {
    int32 retcode = 11;
    uint32 schedule_id = 13;
    repeated PlantFlowerFriendFlowerWishData friend_flower_wish_list = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8553;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlantFlowerGiveFriendFlowerReq {
    uint32 schedule_id = 7;
    uint32 uid = 9;
    map<uint32, uint32> flower_num_map = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8836;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PlantFlowerGiveFriendFlowerRsp {
    int32 retcode = 6;
    uint32 schedule_id = 3;
    repeated uint32 limit_flower_list = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8893;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlantFlowerGetRecvFlowerListReq {
    uint32 schedule_id = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8914;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PlantFlowerRecvFlowerData {
    uint32 uid = 1;
    ProfilePicture profile_picture = 2;
    string nickname = 3;
    map<uint32, uint32> flower_num_map = 4;
}

message PlantFlowerGetRecvFlowerListRsp {
    int32 retcode = 13;
    uint32 schedule_id = 4;
    repeated PlantFlowerRecvFlowerData recv_flower_list = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8929;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlantFlowerHaveRecvFlowerNotify {
    uint32 schedule_id = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8174;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlantFlowerAcceptGiveFlowerReq {
    uint32 schedule_id = 7;
    uint32 uid = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8137;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PlantFlowerAcceptFlowerResultInfo {
    uint32 uid = 1;
    map<uint32, uint32> accept_flower_num_map = 2;
    map<uint32, uint32> unaccept_flower_num_map = 3;
}

message PlantFlowerAcceptGiveFlowerRsp {
    int32 retcode = 12;
    uint32 schedule_id = 3;
    PlantFlowerAcceptFlowerResultInfo accept_flower_result_info = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8431;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlantFlowerAcceptAllGiveFlowerReq {
    uint32 schedule_id = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8017;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PlantFlowerAcceptAllGiveFlowerRsp {
    int32 retcode = 1;
    uint32 schedule_id = 6;
    repeated PlantFlowerAcceptFlowerResultInfo accept_flower_result_info_list = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8831;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlantFlowerGetCanGiveFriendFlowerReq {
    uint32 schedule_id = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8648;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PlantFlowerGetCanGiveFriendFlowerRsp {
    int32 retcode = 4;
    uint32 schedule_id = 5;
    map<uint32, uint32> flower_num_map = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8507;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlantFlowerEditFlowerCombinationReq {
    uint32 schedule_id = 13;
    uint32 entity_id = 3;
    CustomGadgetTreeInfo flower_combination_info = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8506;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PlantFlowerEditFlowerCombinationRsp {
    int32 retcode = 14;
    uint32 schedule_id = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8335;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MusicGameRecord {
    uint32 max_score = 1;
    uint32 max_combo = 2;
    bool is_unlock = 3;
}

message MusicGameActivityDetailInfo {
    map<uint32, MusicGameRecord> music_game_record_map = 1;
    repeated UgcMusicBriefInfo ugc_record_list = 2;
    repeated UgcMusicBriefInfo ugc_search_list = 3;
}

message MusicGameSettleReq {
    uint32 music_basic_id = 14;
    uint32 score = 2;
    uint32 combo = 10;
    uint32 correct_hit = 8;
    uint64 ugc_guid = 11;
    bool is_save_score = 4;
    uint32 restart_times = 3;
    uint32 score_rating = 15;
    uint32 star_rating = 1;
    repeated uint32 note_list = 13;
    uint32 max_combo = 9;
    uint32 is_full_combo = 1975;
    repeated uint32 button_list = 1171;
    uint32 volume = 1104;
    bool is_custom_delay = 998;
    uint32 delay = 268;
    bool is_custom_speed = 238;
    float speed = 887;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8745;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message MusicGameSettleRsp {
    int32 retcode = 7;
    uint32 music_basic_id = 9;
    bool is_unlock_next_level = 1;
    bool is_new_record = 3;
    uint64 ugc_guid = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8288;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MusicGameStartReq {
    uint32 music_basic_id = 10;
    uint64 ugc_guid = 8;
    bool is_save_score = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8927;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message MusicGameStartRsp {
    int32 retcode = 5;
    uint32 music_basic_id = 14;
    uint64 ugc_guid = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8101;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RogueAvatarInfo {
    uint32 avatar_id = 1;
    bool is_onstage = 2;
    bool is_alive = 3;
}

message RogueShowAvatarTeamInfo {
    repeated RogueAvatarInfo avatar_list = 1;
}

message RoguelikeShikigamiRecord {
    uint32 id = 1;
    uint32 level = 2;
}

message RogueEffectRecord {
    uint32 source_id = 1;
    uint32 count = 2;
    repeated uint32 extra_param_list = 3;
    bool is_new = 4;
}

message RoguelikeRuneRecord {
    uint32 rune_id = 1;
    uint32 left_count = 2;
    uint32 max_count = 3;
}

message RogueStageInfo {
    uint32 stage_id = 1;
    bool is_open = 2;
    uint32 coin_c_num = 3;
    uint32 max_passed_level = 4;
    bool is_in_combat = 5;
    bool is_passed = 6;
    bool is_taken_reward = 7;
    RogueShowAvatarTeamInfo avatar_team = 10;
    uint32 cur_level = 11;
    uint32 explore_cell_num = 12;
    repeated RoguelikeRuneRecord rune_record_list = 13;
    bool is_explored = 14;
    uint32 cached_coin_b_num = 15;
    uint32 cached_coin_c_num = 16;
    uint32 revise_monster_level = 17;
}

message RoguelikeDungeonActivityDetailInfo {
    repeated uint32 rune_list = 1;
    repeated RoguelikeShikigamiRecord shikigami_list = 2;
    repeated RogueStageInfo stage_list = 3;
    repeated uint32 equipped_rune_list = 4;
    bool is_content_closed = 5;
    uint32 content_close_time = 6;
}

message DoRoguelikeDungeonCardGachaReq {
    uint32 dungeon_id = 2;
    uint32 cell_id = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8764;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message DoRoguelikeDungeonCardGachaRsp {
    int32 retcode = 9;
    repeated uint32 card_list = 11;
    bool is_can_refresh = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8641;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RefreshRoguelikeDungeonCardReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8072;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message RefreshRoguelikeDungeonCardRsp {
    int32 retcode = 12;
    repeated uint32 res_card_list = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8644;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SelectRoguelikeDungeonCardReq {
    uint32 card_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8070;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SelectRoguelikeDungeonCardRsp {
    int32 retcode = 13;
    uint32 card_id = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8040;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message EquipRoguelikeRuneReq {
    repeated uint32 rune_list = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8510;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message EquipRoguelikeRuneRsp {
    int32 retcode = 12;
    repeated uint32 rune_list = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8516;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TriggerRoguelikeRuneReq {
    uint32 rune_id = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8138;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message TriggerRoguelikeRuneRsp {
    int32 retcode = 9;
    uint32 rune_id = 7;
    uint32 available_count = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8781;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TriggerRoguelikeCurseNotify {
    bool is_trigger_curse = 15;
    uint32 curse_group_id = 1;
    uint32 curse_level = 11;
    repeated uint32 effect_param_list = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8235;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message UpgradeRoguelikeShikigamiReq {
    uint32 shikigami_group_id = 2;
    uint32 upgrade_level = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8422;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message UpgradeRoguelikeShikigamiRsp {
    int32 retcode = 5;
    uint32 shikigami_group_id = 10;
    uint32 cur_level = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8671;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RoguelikeSelectAvatarAndEnterDungeonReq {
    uint32 stage_id = 7;
    repeated uint64 onstage_avatar_guid_list = 12;
    repeated uint64 backstage_avatar_guid_list = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8975;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message RoguelikeSelectAvatarAndEnterDungeonRsp {
    int32 retcode = 9;
    uint32 stage_id = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8471;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RoguelikeGiveUpReq {
    uint32 stage_id = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8988;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message RoguelikeGiveUpRsp {
    uint32 stage_id = 3;
    int32 retcode = 4;
    
    oneof info {
        RoguelikeDungeonSettleInfo settle_info = 7;
    }
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8009;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RoguelikeTakeStageFirstPassRewardReq {
    uint32 stage_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8205;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message RoguelikeTakeStageFirstPassRewardRsp {
    int32 retcode = 8;
    uint32 stage_id = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8409;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GiveUpRoguelikeDungeonCardReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8977;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GiveUpRoguelikeDungeonCardRsp {
    int32 retcode = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8583;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RogueCellInfo {
    uint32 cell_id = 1;
    uint32 dungeon_id = 2;
    uint32 cell_config_id = 3;
    RogueCellState state = 4;
    uint32 cell_type = 5;
}

message EnterRoguelikeDungeonNotify {
    uint32 dungeon_weight_config_id = 6;
    uint32 dungeon_id = 15;
    repeated uint64 onstage_avatar_guid_list = 4;
    repeated uint64 backstage_avatar_guid_list = 11;
    uint32 cur_cell_id = 12;
    map<uint32, RogueCellInfo> cell_info_map = 9;
    uint32 cur_level = 14;
    uint32 stage_id = 2;
    repeated RoguelikeRuneRecord rune_record_list = 5;
    bool is_mist_clear = 1;
    repeated uint32 explored_cell_list = 10;
    float bonus_resource_prop = 7;
    uint32 refresh_cost_item_id = 3;
    uint32 refresh_cost_item_count = 189;
    bool is_first_enter = 668;
    uint32 revise_monster_level = 203;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8646;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message StartRogueEliteCellChallengeReq {
    uint32 cell_id = 3;
    uint32 dungeon_id = 7;
    RogueEliteCellDifficultyType difficulty = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8722;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message StartRogueEliteCellChallengeRsp {
    int32 retcode = 3;
    uint32 cell_id = 13;
    uint32 dungeon_id = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8876;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message StartRogueNormalCellChallengeReq {
    uint32 cell_id = 4;
    uint32 dungeon_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8456;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message StartRogueNormalCellChallengeRsp {
    int32 retcode = 5;
    uint32 cell_id = 6;
    uint32 dungeon_id = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8156;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RogueCellUpdateNotify {
    RogueCellInfo cell_info = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8022;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RogueDungeonPlayerCellChangeNotify {
    uint32 old_cell_id = 5;
    uint32 cell_id = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8832;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RogueHealAvatarsReq {
    uint32 cell_id = 12;
    uint32 dungeon_id = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8331;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message RogueHealAvatarsRsp {
    int32 retcode = 15;
    uint32 cell_id = 1;
    uint32 dungeon_id = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8937;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RogueResumeDungeonReq {
    uint32 stage_id = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8417;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message RogueResumeDungeonRsp {
    int32 retcode = 8;
    uint32 stage_id = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8565;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ClearRoguelikeCurseNotify {
    bool is_clear_all = 13;
    map<uint32, uint32> clear_curse_map = 4;
    uint32 card_id = 9;
    bool is_curse_all_clear = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8291;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RoguelikeCardGachaNotify {
    repeated uint32 card_list = 12;
    bool is_can_refresh = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8618;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RogueSwitchAvatarReq {
    uint32 dungeon_id = 13;
    uint32 cell_id = 6;
    repeated uint64 onstage_avatar_guid_list = 10;
    uint64 cur_avatar_guid = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8930;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message RogueSwitchAvatarRsp {
    int32 retcode = 13;
    uint32 dungeon_id = 15;
    uint32 cell_id = 14;
    repeated uint64 onstage_avatar_guid_list = 3;
    uint64 cur_avatar_guid = 4;
    repeated uint64 backstage_avatar_guid_list = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8556;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message DisableRoguelikeTrapNotify {
    uint32 card_id = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8250;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RoguelikeRuneRecordUpdateNotify {
    repeated RoguelikeRuneRecord rune_record_list = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8497;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RoguelikeMistClearNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8198;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RoguelikeEffectDataNotify {
    repeated RogueEffectRecord card_list = 11;
    repeated RogueEffectRecord curse_list = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8606;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RoguelikeEffectViewReq {
    repeated uint32 view_card_list = 6;
    repeated uint32 view_curse_list = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8377;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message RoguelikeEffectViewRsp {
    int32 retcode = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8770;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message RoguelikeResourceBonusPropUpdateNotify {
    float bonus_resource_prop = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8823;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RoguelikeSettleCoinInfo {
    uint32 cell_num = 1;
    uint32 coin_b = 2;
    uint32 coin_c = 3;
}

message RoguelikeDungeonSettleInfo {
    uint32 stage_id = 1;
    uint32 cur_level = 2;
    map<uint32, RoguelikeSettleCoinInfo> finished_challenge_cell_num_map = 3;
    bool is_final_level = 4;
    uint32 total_coin_b_num = 5;
    uint32 total_coin_c_num = 6;
    bool is_coin_c_reach_limit = 7;
}

message RoguelikeRefreshCardCostUpdateNotify {
    uint32 item_id = 1;
    uint32 item_count = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8912;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message DigMarkPoint {
    Vector pos = 1;
    Vector rot = 2;
    uint32 bundle_id = 3;
}

message DigActivityDetailInfo {
    uint32 stage_id = 1;
    repeated DigMarkPoint dig_mark_point_list = 2;
    repeated uint32 stage_id_list = 3;
}

message DigActivityMarkPointChangeNotify {
    repeated DigMarkPoint dig_mark_point_list = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8679;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message DigActivityChangeGadgetStateReq {
    uint32 entity_id = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8155;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message DigActivityChangeGadgetStateRsp {
    int32 retcode = 4;
    uint32 entity_id = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8851;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message HachiActivityDetailInfo {
    map<uint32, HachiStageInfo> stage_map = 1;
}

message HachiStageInfo {
    uint32 stage_id = 1;
    bool is_open = 2;
    uint32 open_time = 3;
    bool is_finished = 4;
}

message WinterCampStageInfo {
    uint32 id = 1;
    Vector pos = 2;
    uint32 open_time = 3;
    bool is_finished = 4;
    uint32 cur_progress = 5;
    uint32 total_progress = 6;
}

message WinterCampRaceStageInfo {
    uint32 id = 1;
    Vector pos = 2;
    uint32 open_time = 3;
    uint32 max_score = 4;
}

message WinterCampActivityDetailInfo {
    bool is_content_closed = 1;
    WinterCampStageInfo explore_info = 2;
    WinterCampStageInfo battle_info = 3;
    repeated WinterCampRaceStageInfo race_info_list = 4;
    repeated uint32 explore_taken_reward_list = 5;
    repeated uint32 battle_taken_reward_list = 6;
    repeated uint32 wish_id_list = 7;
    repeated ItemParam used_item_list = 8;
}

message WinterCampStageInfoChangeNotify {
    WinterCampStageInfo explore_info = 14;
    WinterCampStageInfo battle_info = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8776;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message WinterCampRaceScoreNotify {
    uint32 id = 2;
    uint32 max_score = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8104;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message WinterCampGiveFriendItemReq {
    uint32 uid = 7;
    repeated ItemParam item_list = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8157;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message WinterCampGiveFriendItemRsp {
    int32 retcode = 10;
    repeated uint32 limit_item_id_list = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8995;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message WinterCampSetWishListReq {
    repeated uint32 item_id_list = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8413;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message WinterCampSetWishListRsp {
    int32 retcode = 15;
    repeated uint32 item_id_list = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8901;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message WinterCampFriendWishData {
    uint32 uid = 1;
    ProfilePicture profile_picture = 2;
    string nickname = 3;
    repeated uint32 item_id_list = 4;
}

message WinterCampGetFriendWishListReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8434;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message WinterCampGetFriendWishListRsp {
    int32 retcode = 3;
    repeated WinterCampFriendWishData wish_data_list = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8922;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message WinterCampRecvItemNotify {
    WinterCampRecvItemData recv_item_data = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8605;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message WinterCampAcceptItemResultInfo {
    uint32 uid = 1;
    repeated ItemParam accept_item_list = 2;
    repeated ItemParam unaccept_item_list = 3;
}

message WinterCampAcceptGiveItemReq {
    uint32 uid = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8847;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message WinterCampAcceptGiveItemRsp {
    int32 retcode = 5;
    WinterCampAcceptItemResultInfo accept_item_result_info = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8108;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message WinterCampAcceptAllGiveItemReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8611;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message WinterCampAcceptAllGiveItemRsp {
    int32 retcode = 11;
    repeated WinterCampAcceptItemResultInfo accept_item_result_info = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8500;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message WinterCampGetCanGiveFriendItemReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8837;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message WinterCampGetCanGiveFriendItemRsp {
    int32 retcode = 7;
    repeated ItemParam item_list = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8376;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message WinterCampRecvItemData {
    uint32 uid = 1;
    ProfilePicture profile_picture = 2;
    string nickname = 3;
    repeated ItemParam item_list = 4;
}

message WinterCampGetRecvItemListReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8110;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message WinterCampGetRecvItemListRsp {
    int32 retcode = 8;
    repeated WinterCampRecvItemData recv_item_data_list = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8089;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message WinterCampEditSnowmanCombinationReq {
    uint32 entity_id = 11;
    CustomGadgetTreeInfo combination_info = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8818;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message WinterCampEditSnowmanCombinationRsp {
    int32 retcode = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8248;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message WinterCampTriathlonSettleNotify {
    uint32 gallery_id = 1;
    uint32 score = 8;
    uint32 remain_time = 10;
    uint32 normal_coin = 2;
    uint32 limited_coin = 15;
    uint32 race_id = 13;
    bool is_new_record = 7;
    bool is_success = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8344;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message WinterCampTakeExploreRewardReq {
    uint32 id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8812;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message WinterCampTakeExploreRewardRsp {
    int32 retcode = 4;
    uint32 id = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8336;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message WinterCampTakeBattleRewardReq {
    uint32 id = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8472;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message WinterCampTakeBattleRewardRsp {
    int32 retcode = 4;
    uint32 id = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8114;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message WinterCampTriathlonRestartReq {
    uint32 gallery_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8241;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message WinterCampTriathlonRestartRsp {
    int32 retcode = 10;
    uint32 gallery_id = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8297;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MistTrialSettleNotify {
    uint32 dungeon_scene_id = 8;
    map<uint32, uint32> exhibition_list_data_record_map = 11;
    map<uint32, uint32> exhibition_list_data_result_map = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8028;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message MistTrialGetDungeonExhibitionDataReq {
    uint32 trial_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8811;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message MistTrialGetDungeonExhibitionDataRsp {
    int32 retcode = 5;
    uint32 trial_id = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8733;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PotionLevelData {
    uint32 level_id = 1;
    uint32 difficulty_level = 2;
    uint32 mode_id = 3;
    uint32 score = 4;
}

message PotionStageData {
    uint32 stage_id = 1;
    bool is_open = 2;
    repeated uint32 cool_down_avatar_id_list = 3;
    repeated uint32 cool_down_buff_id_list = 4;
    repeated PotionLevelData level_list = 5;
}

message PotionActivityDetailInfo {
    repeated PotionStageData stage_list = 1;
}

message PotionResetChallengeReq {
    uint32 stage_id = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8601;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PotionResetChallengeRsp {
    int32 retcode = 2;
    PotionStageData stage_data = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8713;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PotionAvatarInfo {
    bool is_trial = 1;
    uint64 avatar_id = 2;
}

message PotionEnterDungeonReq {
    uint32 stage_id = 2;
    uint32 level_id = 5;
    uint32 mode_id = 13;
    repeated PotionAvatarInfo avatar_info_list = 11;
    repeated uint32 buff_id_list = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8082;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PotionEnterDungeonRsp {
    int32 retcode = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8343;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PotionDungeonAvatar {
    bool is_trial = 1;
    uint64 avatar_guid = 2;
}

message PotionEnterDungeonNotify {
    uint32 stage_id = 6;
    uint32 level_id = 7;
    uint32 difficulty_level = 9;
    uint32 mode_id = 3;
    repeated PotionDungeonAvatar dungeon_avatar_list = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8217;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PotionSaveDungeonResultReq {
    uint32 stage_id = 3;
    uint32 level_id = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8125;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PotionSaveDungeonResultRsp {
    int32 retcode = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8351;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PotionRestartDungeonReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8661;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PotionRestartDungeonRsp {
    int32 retcode = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8491;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PotionDungeonResultInfo {
    uint32 stage_id = 1;
    uint32 level_id = 2;
    uint32 difficulty_level = 3;
    uint32 mode_id = 4;
    uint32 left_time = 5;
    uint32 final_score = 6;
}

message TanukiTravelLevelData {
    uint32 route_id = 1;
    bool is_open = 2;
    bool is_finish = 3;
}

message TanukiTravelActivityDetailInfo {
    repeated TanukiTravelLevelData tanuki_travel_level_data_list = 1;
    uint32 finished_level_index = 2;
    bool is_content_closed = 3;
}

message TanukiTravelFinishGuideQuestNotify {
    uint32 activity_id = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8614;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message LanternProjectionLevelInfo {
    uint32 id = 1;
    bool is_can_start = 2;
    bool is_finished = 3;
    uint32 min_finish_time = 4;
    bool is_show_tips = 5;
}

message LanternProjectionInfo {
    repeated uint32 open_stage_list = 1;
    repeated LanternProjectionLevelInfo level_list = 2;
    repeated ClientInputType view_input_tips_list = 3;
    repeated ClientInputType view_switch_tips_list = 4;
}

message SalvageBundleChallengeInfo {
    repeated uint32 finished_bundle_list = 1;
}

message SalvageScoreChallengeInfo {
    uint32 salvage_challenge_id = 1;
    uint32 max_score = 2;
}

message SalvageChallengeInfo {
    uint32 challenge_type = 1;
    bool is_unlock = 2;
    
    oneof challenge_detail {
        SalvageBundleChallengeInfo bundle_info = 10;
        SalvageScoreChallengeInfo score_challenge_info = 11;
        uint32 boss_challenge_id = 12;
    }
}

message SalvageStageInfo {
    uint32 stage_id = 1;
    bool is_open = 2;
    repeated SalvageChallengeInfo challenge_info_list = 3;
}

message LanternRiteFireworksChallengeInfo {
    uint32 challenge_id = 1;
    uint32 best_score = 2;
    bool is_full_score = 3;
}

message LanternRiteFireworksStageInfo {
    uint32 stage_id = 1;
    bool is_open = 2;
    repeated LanternRiteFireworksChallengeInfo challenge_info_list = 3;
}

message LanternRiteFireworksInfo {
    repeated LanternRiteFireworksStageInfo stage_info_list = 1;
}

message LanternRiteActivityDetailInfo {
    LanternProjectionInfo projection_info = 1;
    repeated SalvageStageInfo stage_info_list = 2;
    bool is_mini_eldritch_dungeon_open = 3;
    bool is_taken_skin_reward = 4;
    LanternRiteFireworksInfo fireworks_info = 5;
    bool is_content_closed = 6;
}

message FinishLanternProjectionReq {
    uint32 level_id = 12;
    uint32 finish_time = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8616;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message FinishLanternProjectionRsp {
    int32 retcode = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8620;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ViewLanternProjectionTipsReq {
    ClientInputType input_type = 13;
    bool is_input_tips = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8458;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ViewLanternProjectionTipsRsp {
    int32 retcode = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8993;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ViewLanternProjectionLevelTipsReq {
    uint32 level_id = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8494;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ViewLanternProjectionLevelTipsRsp {
    int32 retcode = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8251;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SalvagePreventSettleInfo {
    SalvagePreventGallerySettleInfo settle_info = 1;
    bool is_new_record = 2;
}

message SalvagePreventSettleNotify {
    SalvagePreventSettleInfo settle_info = 13;
    uint32 gallery_id = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8961;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SalvageEscortSettleInfo {
    SalvageEscortGallerySettleInfo settle_info = 1;
    bool is_new_record = 2;
}

message SalvageEscortSettleNotify {
    SalvageEscortSettleInfo settle_info = 11;
    uint32 gallery_id = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8480;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message LanternRiteTakeSkinRewardReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8169;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message LanternRiteTakeSkinRewardRsp {
    int32 retcode = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8384;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SalvagePreventRestartReq {
    uint32 gallery_id = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8361;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SalvagePreventRestartRsp {
    int32 retcode = 4;
    uint32 gallery_id = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8192;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SalvageEscortRestartReq {
    uint32 gallery_id = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8177;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SalvageEscortRestartRsp {
    int32 retcode = 2;
    uint32 gallery_id = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8729;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message LanternRiteStartFireworksReformReq {
    uint32 stage_id = 4;
    uint32 challenge_id = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8683;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message LanternRiteFireworksReformFactorInfo {
    uint32 factor_id = 1;
    uint32 factor_value = 2;
}

message LanternRiteFireworksReformSkillInfo {
    uint32 skill_id = 1;
    bool is_unlock = 2;
    uint32 unlock_challenge_id = 3;
    uint32 unlock_challenge_time = 4;
}

message LanternRiteStartFireworksReformRsp {
    int32 retcode = 5;
    uint32 stage_id = 15;
    uint32 challenge_id = 1;
    uint32 fire_element_value = 7;
    uint32 fire_element_addition_ratio = 11;
    uint32 stamina_value = 9;
    uint32 reform_score = 4;
    repeated LanternRiteFireworksReformFactorInfo factor_info_list = 3;
    repeated LanternRiteFireworksReformSkillInfo skill_info_list = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8263;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message LanternRiteDoFireworksReformReq {
    uint32 stage_id = 3;
    uint32 challenge_id = 4;
    uint32 factor_id = 10;
    uint32 skill_id = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8712;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message LanternRiteDoFireworksReformRsp {
    int32 retcode = 11;
    uint32 stage_id = 8;
    uint32 challenge_id = 6;
    uint32 fire_element_value = 15;
    uint32 fire_element_addition_ratio = 13;
    uint32 stamina_value = 4;
    uint32 reform_score = 7;
    repeated LanternRiteFireworksReformFactorInfo factor_info_list = 12;
    bool is_lucky = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8670;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message LanternRiteEndFireworksReformReq {
    uint32 stage_id = 13;
    uint32 challenge_id = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8276;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message LanternRiteEndFireworksReformRsp {
    int32 retcode = 5;
    uint32 stage_id = 8;
    uint32 challenge_id = 9;
    uint32 final_score = 14;
    bool is_new_record = 12;
    bool is_stamina_up = 7;
    bool is_unlock_new_skill = 6;
    bool is_unlock_fireworks = 4;
    bool is_full_score = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8122;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message UpdateSalvageBundleMarkReq {
    uint32 stage_id = 7;
    uint32 challenge_type = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8018;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message UpdateSalvageBundleMarkRsp {
    int32 retcode = 6;
    uint32 stage_id = 12;
    uint32 challenge_type = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8685;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MichiaeMatsuriStage {
    uint32 open_time = 1;
    bool is_open = 2;
    uint32 stage_id = 3;
}

message MichiaeMatsuriChestPositionInfo {
    uint32 group_id = 1;
    uint32 config_id = 2;
    Vector pos = 3;
}

message MichiaeMatsuriChallengePositionInfo {
    uint32 group_id = 1;
    Vector pos = 2;
    uint32 gadget_id = 3;
}

message MichiaeMatsuriActivityDetailInfo {
    repeated MichiaeMatsuriStage stage_list = 1;
    repeated uint32 unlocked_crystal_skill_list = 2;
    uint32 gain_crystal_exp = 3;
    repeated MichiaeMatsuriChestPositionInfo chest_pos_list = 4;
    repeated MichiaeMatsuriChallengePositionInfo challenge_pos_list = 5;
}

message MichiaeMatsuriDarkPressureLevelUpdateNotify {
    uint32 dark_pressure_level = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8454;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MichiaeMatsuriInteractStatueReq {
    uint32 statue_entity_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8341;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message MichiaeMatsuriInteractStatueRsp {
    int32 retcode = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8210;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MichiaeMatsuriUnlockCrystalSkillReq {
    uint32 crystal_skill_id = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8884;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message MichiaeMatsuriUnlockCrystalSkillRsp {
    int32 retcode = 8;
    uint32 crystal_skill_id = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8980;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MichiaeMatsuriStartBossChallengeReq {
    uint32 gadget_entity_id = 9;
    uint32 difficulty = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8290;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message MichiaeMatsuriStartBossChallengeRsp {
    int32 retcode = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8225;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MichiaeMatsuriStartDarkChallengeReq {
    uint32 worktop_entity_id = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8501;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message MichiaeMatsuriStartDarkChallengeRsp {
    int32 retcode = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8523;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MichiaeMatsuriRemoveChestMarkNotify {
    uint32 group_id = 11;
    uint32 config_id = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8085;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MichiaeMatsuriRemoveChallengeMarkNotify {
    uint32 group_id = 6;
    uint32 gadget_id = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8220;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MichiaeMatsuriGainCrystalExpUpdateNotify {
    uint32 activity_id = 13;
    uint32 gain_crystal_exp = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8368;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BartenderTaskInfo {
    uint32 id = 1;
    bool is_finish = 2;
}

message BartenderLevelInfo {
    uint32 id = 1;
    uint32 max_score = 2;
    bool is_finish = 3;
}

message BartenderActivityDetailInfo {
    repeated uint32 unlock_item_list = 1;
    repeated uint32 unlock_formula_list = 2;
    repeated BartenderTaskInfo unlock_task_list = 3;
    repeated BartenderLevelInfo unlock_level_list = 4;
    bool is_develop_module_open = 5;
    bool is_content_closed = 6;
}

message BartenderCompleteOrderReq {
    repeated ItemParam item_list = 12;
    uint32 cup_type = 8;
    uint32 quest_id = 1;
    repeated uint32 optional_order_list = 9;
    uint32 qte_count = 13;
    uint32 retry_count = 3;
    bool is_view_formula = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8590;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message BartenderCompleteOrderRsp {
    int32 retcode = 13;
    uint32 quest_id = 11;
    uint32 formula_id = 9;
    repeated uint32 affix_list = 3;
    uint32 finish_order_id = 12;
    bool is_new = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8466;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BartenderCancelOrderReq {
    uint32 quest_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8366;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message BartenderCancelOrderRsp {
    int32 retcode = 3;
    uint32 quest_id = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8535;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BartenderGetFormulaReq {
    repeated ItemParam item_list = 4;
    uint32 quest_id = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8681;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message BartenderGetFormulaRsp {
    int32 retcode = 9;
    uint32 formula_id = 3;
    repeated uint32 affix_list = 14;
    bool is_new = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8483;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BartenderStartLevelReq {
    uint32 level_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8595;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message BartenderStartLevelRsp {
    int32 retcode = 12;
    uint32 level_id = 9;
    repeated uint32 order_list = 1;
    uint32 time = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8059;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BartenderCancelLevelReq {
    uint32 level_id = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8224;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message BartenderCancelLevelRsp {
    int32 retcode = 14;
    uint32 level_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8537;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BartenderLevelProgressNotify {
    uint32 level_id = 7;
    bool is_finish = 14;
    uint32 score = 13;
    bool is_new_record = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8924;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message BartenderFinishLevelReq {
    uint32 level_id = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8572;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message BartenderFinishLevelRsp {
    int32 retcode = 4;
    uint32 level_id = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8905;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message OfficialCustomDungeon {
    uint32 dungeon_id = 1;
    uint32 win_times = 2;
}

message UgcActivityDetailInfo {
    uint32 custom_dungeon_group_id = 1;
    repeated OfficialCustomDungeon official_custom_dungeon_list = 2;
    bool is_enable_ugc = 3;
    bool is_ugc_feature_closed = 4;
}

message CrystalLinkActivityDetailInfo {
    repeated CrystalLinkLevelInfo level_info_list = 1;
    uint32 difficulty_id = 2;
}

message CrystalLinkLevelInfo {
    uint32 level_id = 1;
    bool is_open = 2;
    uint32 best_score = 3;
    repeated CrystalLinkTeamInfo team_info_list = 4;
}

message CrystalLinkTeamInfo {
    repeated CrystalLinkAvatarInfo avatar_info_list = 1;
    repeated CrystalLinkBuffInfo buff_info_list = 2;
}

message CrystalLinkAvatarInfo {
    bool is_trial = 1;
    uint64 avatar_id = 2;
}

message CrystalLinkBuffInfo {
    uint32 cond_buff_id = 1;
    uint32 effect_buff_id = 2;
}

message CrystalLinkEnterDungeonReq {
    uint32 level_id = 7;
    uint32 difficulty_id = 15;
    repeated CrystalLinkTeamInfo team_info_list = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8783;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message CrystalLinkEnterDungeonRsp {
    int32 retcode = 11;
    uint32 level_id = 14;
    uint32 difficulty_id = 5;
    repeated CrystalLinkTeamInfo team_info_list = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8464;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message CrystalLinkDungeonAvatarInfo {
    bool is_trial = 1;
    uint64 avatar_guid = 2;
}

message CrystalLinkDungeonInfoNotify {
    uint32 level_id = 10;
    uint32 difficulty_id = 3;
    bool is_upper_part = 14;
    repeated CrystalLinkDungeonAvatarInfo dungeon_avatar_info_list = 5;
    repeated CrystalLinkBuffInfo buff_info_list = 12;
    uint32 init_gallery_progress = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8468;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message CrystalLinkRestartDungeonReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8350;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message CrystalLinkRestartDungeonRsp {
    int32 retcode = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8153;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message QuickOpenActivityReq {
    uint32 activity_id = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8221;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message QuickOpenActivityRsp {
    int32 retcode = 11;
    uint32 activity_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8882;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message IrodoriChessMapData {
    uint32 best_score = 1;
    repeated uint32 equiped_card_list = 2;
    uint32 map_id = 3;
    IrodoriChessEntranceDetailInfo entrance_detail_info = 4;
}

message IrodoriChessLevelData {
    uint32 open_time = 1;
    IrodoriChessMapData normal_map_data = 2;
    IrodoriChessMapData hard_map_data = 3;
    uint32 level_id = 4;
}

message IrodoriChessData {
    bool is_open = 1;
    repeated IrodoriChessLevelData level_data_list = 2;
}

message IrodoriFlowerData {
    repeated ItemParam used_flower_list = 1;
    repeated uint32 finished_theme_list = 2;
}

message IrodoriPoetryThemeData {
    uint32 theme_id = 1;
    uint32 progress = 2;
    uint32 max_progress = 3;
    repeated uint32 scanned_index_list = 4;
    uint32 selected_line_id = 5;
    repeated uint32 line_id_list = 6;
    uint32 min_progress = 7;
}

message IrodoriPoetryData {
    repeated IrodoriPoetryThemeData theme_data_list = 1;
    uint32 cur_theme_id = 2;
}

message IrodoriMasterLevelDetailInfo {
    uint32 diffculty = 1;
    bool is_have_try = 2;
    bool is_finish = 3;
    uint32 min_finish_time = 4;
}

message IrodoriMasterLevelInfo {
    uint32 level_id = 1;
    repeated IrodoriMasterLevelDetailInfo detail_info = 2;
}

message IrodoriActivityDetailInfo {
    IrodoriChessData chess_data = 1;
    IrodoriFlowerData flower_data = 2;
    IrodoriPoetryData poetry_data = 3;
    repeated IrodoriMasterLevelInfo master_level_list = 4;
}

message IrodoriEditFlowerCombinationReq {
    uint32 entity_id = 6;
    CustomGadgetTreeInfo combination_info = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8808;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message IrodoriEditFlowerCombinationRsp {
    int32 retcode = 1;
    bool is_can_take_reward = 3;
    bool is_already_finished = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8879;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message IrodoriScanEntityReq {
    uint32 entity_id = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8586;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message IrodoriScanEntityRsp {
    int32 retcode = 2;
    bool is_get_inspiration = 9;
    IrodoriPoetryThemeData theme_data = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8485;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message IrodoriFillPoetryReq {
    uint32 theme_id = 7;
    uint32 line_id = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8592;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message IrodoriFillPoetryRsp {
    int32 retcode = 6;
    IrodoriPoetryThemeData theme_data = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8919;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message IrodoriChessEquipCardReq {
    uint32 level_id = 5;
    bool is_hard_map = 10;
    uint32 card_id = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8775;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message IrodoriChessEquipCardRsp {
    int32 retcode = 8;
    uint32 level_id = 12;
    bool is_hard_map = 9;
    uint32 card_id = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8902;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message IrodoriChessUnequipCardReq {
    uint32 level_id = 10;
    bool is_hard_map = 4;
    uint32 card_id = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8436;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message IrodoriChessUnequipCardRsp {
    int32 retcode = 13;
    uint32 level_id = 5;
    bool is_hard_map = 7;
    uint32 card_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8635;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message EnterIrodoriChessDungeonReq {
    uint32 level_id = 1;
    bool is_hard_map = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8999;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message EnterIrodoriChessDungeonRsp {
    int32 retcode = 12;
    uint32 level_id = 10;
    bool is_hard_map = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8286;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message IrodoriMasterStartGalleryReq {
    uint32 level_id = 10;
    uint32 difficulty = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8429;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message IrodoriMasterStartGalleryRsp {
    int32 retcode = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8971;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message IrodoriMasterGalleryCgEndNotify {
    uint32 level_id = 3;
    uint32 gallery_id = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8845;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message IrodoriMasterGallerySettleNotify {
    uint32 gallery_id = 9;
    IrodoriMasterGallerySettleInfo settle_info = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8701;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PhotoPosData {
    uint32 pos_id = 1;
    bool is_open = 2;
    uint32 open_time = 3;
    Vector center = 4;
    bool is_view = 5;
}

message PhotoActivityDetailInfo {
    repeated PhotoPosData photo_pos_data_list = 1;
    bool is_content_closed = 2;
}

message PhotoActivityFinishReq {
    uint32 pos_id = 9;
    bool is_succ = 4;
    uint32 check_root_id = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8086;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PhotoActivityFinishRsp {
    int32 retcode = 13;
    uint32 pos_id = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8404;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PhotoSettleNotify {
    PhotoGallerySettleInfo settle_info = 4;
    uint32 gallery_id = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8165;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PhotoActivityClientViewReq {
    uint32 pos_id = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8245;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PhotoActivityClientViewRsp {
    int32 retcode = 7;
    uint32 pos_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8848;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SpiceStageData {
    uint32 stage_id = 1;
    bool is_open = 2;
    uint32 success_times = 3;
}

message SpiceActivityDetailInfo {
    repeated SpiceStageData spice_stage_data_list = 1;
    uint32 increase_avatar_fetter_limit_times = 2;
    uint32 current_increase_avatar_fetter_times = 3;
}

message SpiceActivityFinishMakeSpiceReq {
    uint32 stage_id = 10;
    bool is_success = 2;
    uint32 left_turns = 3;
    repeated uint32 left_material_id_list = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8223;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SpiceActivityFinishMakeSpiceRsp {
    int32 retcode = 13;
    uint32 stage_id = 3;
    bool is_success = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8133;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SpiceActivityProcessFoodReq {
    repeated ItemParam normal_food_list = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8754;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SpiceActivityProcessFoodRsp {
    int32 retcode = 2;
    repeated ItemParam normal_food_list = 4;
    repeated ItemParam special_food_list = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8894;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SpiceActivityGivingRecordNotify {
    uint32 increase_avatar_fetter_limit_times = 15;
    uint32 current_increase_avatar_fetter_times = 2;
    uint32 avatar_id = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8892;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GachaStageData {
    uint32 stage_id = 1;
    bool is_open = 2;
    map<uint32, uint32> target_num_map = 3;
}

message GachaActivityDetailInfo {
    map<uint32, uint32> robot_num_map = 1;
    uint32 robot_finish_num = 2;
    repeated GachaStageData gacha_stage_data_list = 3;
    map<uint32, uint32> have_reward_robot_num_map = 4;
    uint32 tech_create_robot_id = 5;
    repeated uint32 have_get_robot_list = 6;
}

message GachaActivityPercentNotify {
    uint32 percent = 3;
    uint32 sub_item_stage = 7;
    uint32 item_stage = 2;
    map<uint32, uint32> target_num_map = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8859;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GachaActivityUpdateElemNotify {
    uint32 elem_type = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8014;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GachaActivityCreateRobotReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8233;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GachaActivityCreateRobotRsp {
    int32 retcode = 9;
    uint32 robot_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8625;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GachaActivityTakeRewardReq {
    map<uint32, uint32> robot_num_map = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8414;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GachaActivityTakeRewardRsp {
    int32 retcode = 7;
    map<uint32, uint32> robot_num_map = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8488;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GachaActivityResetReq {
    uint32 stage_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8513;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GachaActivityResetRsp {
    int32 retcode = 3;
    uint32 stage_id = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8717;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GachaActivityNextStageReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8728;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GachaActivityNextStageRsp {
    int32 retcode = 7;
    uint32 stage_id = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8693;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ActivityGiveFriendGiftReq {
    uint32 schedule_id = 15;
    uint32 uid = 11;
    map<uint32, uint32> gift_num_map = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8171;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivityGiveFriendGiftRsp {
    int32 retcode = 10;
    uint32 schedule_id = 1;
    repeated uint32 limit_gift_list = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8083;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ActivityRecvGiftData {
    uint32 uid = 1;
    ProfilePicture profile_picture = 2;
    string nickname = 3;
    map<uint32, uint32> gift_num_map = 4;
    string remark_name = 5;
}

message ActivityGetRecvGiftListReq {
    uint32 schedule_id = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8173;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivityGetRecvGiftListRsp {
    int32 retcode = 12;
    uint32 schedule_id = 8;
    repeated ActivityRecvGiftData recv_gift_list = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8326;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ActivityHaveRecvGiftNotify {
    uint32 schedule_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8237;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ActivityAcceptGiftResultInfo {
    uint32 uid = 1;
    map<uint32, uint32> accept_gift_num_map = 2;
    map<uint32, uint32> unaccept_gift_num_map = 3;
}

message ActivityAcceptGiveGiftReq {
    uint32 schedule_id = 14;
    uint32 uid = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8908;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivityAcceptGiveGiftRsp {
    int32 retcode = 13;
    uint32 schedule_id = 12;
    ActivityAcceptGiftResultInfo accept_gift_result_info = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8863;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ActivityAcceptAllGiveGiftReq {
    uint32 schedule_id = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8814;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivityAcceptAllGiveGiftRsp {
    int32 retcode = 6;
    uint32 schedule_id = 14;
    repeated ActivityAcceptGiftResultInfo accept_gift_result_info_list = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8795;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ActivityGetCanGiveFriendGiftReq {
    uint32 schedule_id = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8708;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivityGetCanGiveFriendGiftRsp {
    int32 retcode = 1;
    uint32 schedule_id = 11;
    map<uint32, uint32> gift_num_map = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8449;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ActivitySetGiftWishReq {
    uint32 schedule_id = 15;
    map<uint32, uint32> gift_num_map = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8258;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivitySetGiftWishRsp {
    int32 retcode = 3;
    uint32 schedule_id = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8957;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ActivityFriendGiftWishData {
    uint32 uid = 1;
    ProfilePicture profile_picture = 2;
    string nickname = 3;
    map<uint32, uint32> gift_num_map = 4;
    string remark_name = 5;
}

message ActivityGetFriendGiftWishListReq {
    uint32 schedule_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8375;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivityGetFriendGiftWishListRsp {
    int32 retcode = 4;
    uint32 schedule_id = 9;
    repeated ActivityFriendGiftWishData friend_gift_wish_list = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8445;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message LuminanceStoneChallengeActivityDetailInfo {
    bool is_content_closed = 1;
    uint32 current_stage_id = 2;
    bool is_final_gallery_complete = 3;
    uint32 best_score = 4;
}

message LuminanceStoneChallengeSettleInfo {
    LuminanceStoneChallengeGallerySettleInfo settle_info = 1;
    bool is_new_record = 2;
}

message LuminanceStoneChallengeSettleNotify {
    LuminanceStoneChallengeSettleInfo settle_info = 2;
    uint32 gallery_id = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8242;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RogueDiaryDungeonRecord {
    uint32 difficulty = 1;
    bool is_finish = 2;
    uint32 max_round = 3;
    uint32 finish_time = 4;
}

message RogueDiaryStageInfo {
    uint32 stage_id = 1;
    bool is_have_try = 2;
    RogueDiaryDungeonRecord best_record = 3;
}

message RogueDiaryProgress {
    uint32 stage_id = 1;
    uint32 difficulty = 2;
    bool is_enter_dungeon = 3;
    repeated uint32 optional_card_list = 4;
    uint32 cur_round = 5;
}

message RogueDiaryActivityDetailInfo {
    bool is_content_closed = 1;
    repeated RogueDiaryStageInfo stage_list = 2;
    bool is_have_progress = 3;
    RogueDiaryProgress cur_progress = 4;
}

message RogueDiaryAvatar {
    ActivityDungeonAvatar avatar = 1;
    repeated RogueDiaryAvatarDisableStatus disable_status_list = 2;
    uint32 tired_round = 3;
    uint32 level = 4;
}

message RogueDiaryRoomInfo {
    uint32 config_id = 1;
    bool is_boss = 2;
    repeated Uint32Pair monster_list = 3;
}

message StartRogueDiaryPlayReq {
    uint32 stage_id = 5;
    uint32 difficulty = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8801;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message StartRogueDiaryPlayRsp {
    int32 retcode = 11;
    repeated RogueDiaryAvatar trial_avatar_list = 1;
    repeated RogueDiaryAvatar avatar_list = 3;
    repeated uint32 rand_card_list = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8809;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ResetRogueDiaryPlayReq {
    uint32 stage_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8240;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ResetRogueDiaryPlayRsp {
    int32 retcode = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8724;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message EnterRogueDiaryDungeonReq {
    repeated RogueDiaryAvatar chosen_avatar_list = 12;
    repeated uint32 chosen_card_list = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8437;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message EnterRogueDiaryDungeonRsp {
    int32 retcode = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8265;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ResumeRogueDiaryDungeonReq {
    uint32 stage_id = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8546;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ResumeRogueDiaryDungeonRsp {
    int32 retcode = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8636;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RogueDiaryDungeonInfoNotify {
    repeated uint32 round_monster_list = 7;
    repeated uint32 round_card_list = 12;
    uint32 stage_id = 10;
    uint32 difficulty = 8;
    uint32 dungeon_id = 2;
    uint32 cur_round = 5;
    uint32 cur_room = 9;
    uint32 coin = 13;
    uint32 time = 15;
    repeated RogueDiaryRoomInfo room_list = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8397;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message RogueDiaryDungeonSettleNotify {
    bool is_finish = 3;
    uint32 explore_time = 7;
    uint32 cur_round = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8296;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message StartRogueDiaryRoomReq {
    uint32 room_difficulty = 10;
    bool is_select_hard = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8019;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message StartRogueDiaryRoomRsp {
    int32 retcode = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8319;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RogueDiaryTiredAvatarNotify {
    repeated RogueDiaryAvatar optianal_tired_avatar_list = 10;
    uint32 tired_type = 4;
    uint32 reserve_avatar_num = 11;
    bool is_need_show = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8604;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ReserveRogueDiaryAvatarReq {
    repeated RogueDiaryAvatar reserve_avatar_list = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8617;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ReserveRogueDiaryAvatarRsp {
    int32 retcode = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8113;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GetRogueDairyRepairInfoReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8835;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GetRogueDairyRepairInfoRsp {
    int32 retcode = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8889;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RefreshRogueDiaryCardReq {
    repeated uint32 refresh_card_list = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8672;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message RefreshRogueDiaryCardRsp {
    int32 retcode = 1;
    repeated uint32 rand_card_list = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8543;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RogueFinishRepairReq {
    repeated RogueDiaryAvatar chosen_avatar_list = 6;
    repeated uint32 chosen_card_list = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8348;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message RogueFinishRepairRsp {
    int32 retcode = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8952;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TryInterruptRogueDiaryDungeonReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8209;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message TryInterruptRogueDiaryDungeonRsp {
    int32 retcode = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8843;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RogueDiaryRepairInfoNotify {
    repeated RogueDiaryAvatar avatar_list = 10;
    repeated uint32 rand_card_list = 4;
    repeated uint32 chosen_card_list = 3;
    repeated RogueDiaryAvatar trial_avatar_list = 12;
    uint32 stage_id = 13;
    repeated RogueDiaryRoomInfo room_list = 7;
    repeated RogueDiaryAvatar select_avatar_list = 6;
    repeated uint32 select_card_list = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8608;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message RetryCurRogueDiaryDungeonReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8053;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message RetryCurRogueDiaryDungeonRsp {
    int32 retcode = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8664;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RogueDiaryReviveAvatarReq {
    RogueDiaryAvatar revive_avatar = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8034;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message RogueDiaryReviveAvatarRsp {
    int32 retcode = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8299;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TryEnterNextRogueDiaryDungeonReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8524;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message TryEnterNextRogueDiaryDungeonRsp {
    int32 retcode = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8095;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RogueDiaryCoinAddNotify {
    uint32 num = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8476;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

enum RogueCellState {
    ROGUE_CELL_NONE = 0;
    ROGUE_CELL_BATTLE = 1;
    ROGUE_CELL_SUCCESS = 2;
    ROGUE_CELL_FINISH = 3;
    ROGUE_CELL_TAKEN_CHEST = 4;
}

enum RogueEliteCellDifficultyType {
    ROGUE_ELITE_NORMAL = 0;
    ROGUE_ELITE_HARD = 1;
}

enum RogueDiaryAvatarDisableStatus {
    ROGUE_DIARY_AVATAR_DISABLE_NONE = 0;
    ROGUE_DIARY_AVATAR_DISABLE_DEATH = 1;
    ROGUE_DIARY_AVATAR_DISABLE_TIRED = 2;
    ROGUE_DIARY_AVATAR_DISABLE_DUPLICATED = 3;
}
