syntax = "proto3";

package proto;

import "define.proto";

message GetActivityScheduleReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2001;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivityScheduleInfo {
    uint32 activity_id = 1;
    bool is_open = 2;
    uint32 schedule_id = 3;
    uint32 begin_time = 4;
    uint32 end_time = 5;
}

message GetActivityScheduleRsp {
    int32 retcode = 1;
    repeated ActivityScheduleInfo activity_schedule_list = 2;
    uint32 remain_fly_sea_lamp_num = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2002;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GetActivityInfoReq {
    repeated uint32 activity_id_list = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2003;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivityInfo {
    uint32 activity_id = 1;
    uint32 schedule_id = 2;
    uint32 begin_time = 3;
    uint32 end_time = 4;
    uint32 activity_type = 5;
    bool is_play_open_anim = 6;
    bool is_finished = 7;
    bool is_starting = 8;
    repeated ActivityWatcherInfo watcher_info_list = 9;
    repeated uint32 meet_cond_list = 10;
    repeated uint32 expire_cond_list = 15;
    
    oneof detail {
        SeaLampActivityDetailInfo sam_lamp_info = 11;
        CrucibleActivityDetailInfo crucible_info = 12;
        SalesmanActivityDetailInfo salesman_info = 13;
        TrialAvatarActivityDetailInfo trial_avatar_info = 14;
        DeliveryActivityDetailInfo delivery_info = 16;
        AsterActivityDetailInfo aster_info = 21;
        FlightActivityDetailInfo flight_info = 25;
        DragonSpineActivityDetailInfo dragon_spine_info = 31;
        EffigyActivityDetailInfo effigy_info = 32;
        TreasureMapActivityDetailInfo treasure_map_info = 35;
    }
}

message GetActivityInfoRsp {
    int32 retcode = 1;
    repeated ActivityInfo activity_info_list = 2;
    repeated uint32 activated_sale_id_list = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2004;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ActivityPlayOpenAnimNotify {
    uint32 activity_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2005;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivityInfoNotify {
    ActivityInfo activity_info = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2006;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivityScheduleInfoNotify {
    repeated ActivityScheduleInfo activity_schedule_list = 1;
    uint32 remain_fly_sea_lamp_num = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2007;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivityWatcherInfo {
    uint32 watcher_id = 1;
    uint32 cur_progress = 2;
    uint32 total_progress = 3;
    bool is_taken_reward = 4;
}

message ActivityTakeWatcherRewardReq {
    uint32 activity_id = 1;
    uint32 watcher_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2008;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivityTakeWatcherRewardRsp {
    int32 retcode = 1;
    uint32 activity_id = 2;
    uint32 watcher_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2009;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ActivityUpdateWatcherNotify {
    uint32 activity_id = 1;
    ActivityWatcherInfo watcher_info = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2010;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SeaLampActivityDetailInfo {
    uint32 phase_id = 1;
    uint32 progress = 2;
    uint32 days = 3;
    uint32 contribution = 4;
    repeated uint32 taken_contribution_reward_list = 5;
    repeated uint32 taken_phase_reward_list = 6;
    uint32 factor = 7;
}

message SeaLampFlyLampReq {
    uint32 activity_id = 4;
    uint32 item_id = 1;
    string wish_text = 2;
    uint32 item_num = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2014;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SeaLampFlyLampRsp {
    int32 retcode = 1;
    uint32 total_contribution = 2;
    uint32 remain_fly_num = 3;
    uint32 add_contribution = 4;
    uint32 add_progress = 5;
    uint32 item_num = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2015;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SeaLampTakeContributionRewardReq {
    uint32 activity_id = 2;
    uint32 config_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2016;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SeaLampTakeContributionRewardRsp {
    int32 retcode = 1;
    uint32 config_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2017;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SeaLampTakePhaseRewardReq {
    uint32 activity_id = 2;
    uint32 phase_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2018;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SeaLampTakePhaseRewardRsp {
    int32 retcode = 1;
    uint32 phase_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2019;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SeaLampContributeItemReq {
    uint32 activity_id = 2;
    repeated ItemParam item_list = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2020;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SeaLampContributeItemRsp {
    int32 retcode = 1;
    uint32 total_contribution = 2;
    uint32 add_contribution = 3;
    uint32 add_progress = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2021;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message AnnounceData {
    uint32 config_id = 1;
    uint32 begin_time = 2;
    uint32 end_time = 3;
    string center_system_text = 4;
    string count_down_text = 5;
    string dungeon_confirm_text = 6;
    uint32 center_system_frequency = 7;
    uint32 count_down_frequency = 8;
    bool is_center_system_last_5_every_minutes = 9;
}

message LoadActivityTerrainNotify {
    uint32 activity_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2024;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ServerAnnounceNotify {
    repeated AnnounceData announce_data_list = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2022;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ServerAnnounceRevokeNotify {
    repeated uint32 config_id_list = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2023;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SalesmanActivityDetailInfo {
    SalesmanStatusType status = 1;
    uint32 day_index = 2;
    uint32 last_deliver_time = 3;
    uint32 deliver_count = 4;
    map<uint32, uint32> selected_reward_id_map = 5;
    uint32 day_reward_id = 6;
    uint32 special_reward_preview_id = 7;
    uint32 cond_day_count = 8;
    bool is_has_taken_special_reward = 9;
    bool is_today_has_delivered = 10;
}

message SalesmanDeliverItemReq {
    uint32 schedule_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2031;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SalesmanDeliverItemRsp {
    int32 retcode = 1;
    uint32 schedule_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2032;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SalesmanTakeRewardReq {
    uint32 schedule_id = 1;
    uint32 position = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2033;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SalesmanTakeRewardRsp {
    int32 retcode = 1;
    uint32 schedule_id = 2;
    uint32 reward_id = 3;
    uint32 position = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2034;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ActivityCondStateChangeNotify {
    uint32 schedule_id = 1;
    uint32 activity_id = 2;
    repeated uint32 meet_cond_list = 3;
    repeated uint32 expire_cond_list = 4;
    repeated uint32 activated_sale_id_list = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2035;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SalesmanTakeSpecialRewardReq {
    uint32 schedule_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2036;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SalesmanTakeSpecialRewardRsp {
    int32 retcode = 1;
    uint32 schedule_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2037;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GetAuthSalesmanInfoReq {
    uint32 schedule_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2038;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GetAuthSalesmanInfoRsp {
    int32 retcode = 1;
    uint32 schedule_id = 2;
    uint32 day_reward_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2039;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TrialAvatarActivityRewardDetailInfo {
    uint32 trial_avatar_index_id = 1;
    bool passed_dungeon = 2;
    bool received_reward = 3;
}

message TrialAvatarActivityDetailInfo {
    repeated TrialAvatarActivityRewardDetailInfo reward_info_list = 1;
}

message EnterTrialAvatarActivityDungeonReq {
    uint32 activity_id = 1;
    uint32 trial_avatar_index_id = 2;
    uint32 enter_point_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2041;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message EnterTrialAvatarActivityDungeonRsp {
    int32 retcode = 1;
    uint32 activity_id = 2;
    uint32 trial_avatar_index_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2042;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ReceivedTrialAvatarActivityRewardReq {
    uint32 trial_avatar_index_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2043;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ReceivedTrialAvatarActivityRewardRsp {
    int32 retcode = 1;
    uint32 activity_id = 2;
    uint32 trial_avatar_index_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2044;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TrialAvatarFirstPassDungeonNotify {
    uint32 trial_avatar_index_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2047;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TrialAvatarInDungeonIndexNotify {
    uint32 trial_avatar_index_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2048;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message CrucibleBattleUidInfo {
    uint32 uid = 1;
    string nickname = 2;
    uint32 icon = 3;
    string online_id = 4;
}

message CrucibleActivityDetailInfo {
    uint32 cost_time = 1;
    repeated CrucibleBattleUidInfo uid_info_list = 2;
    Vector pos = 3;
    uint32 battle_world_level = 4;
}

message DeliveryActivityDetailInfo {
    uint32 day_index = 1;
    repeated uint32 finished_delivery_quest_index = 2;
    bool is_taken_reward = 3;
}

message TakeDeliveryDailyRewardReq {
    uint32 schedule_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2051;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message TakeDeliveryDailyRewardRsp {
    int32 retcode = 1;
    uint32 schedule_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2052;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message FinishDeliveryNotify {
    uint32 schedule_id = 1;
    uint32 day_index = 2;
    uint32 finished_quest_index = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2053;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message AsterLittleDetailInfo {
    bool is_open = 1;
    uint32 stage_id = 2;
    AsterLittleStageState stage_state = 3;
    uint32 begin_time = 4;
    uint32 stage_begin_time = 5;
}

message AsterMidCampInfo {
    uint32 camp_id = 1;
    Vector pos = 2;
}

message AsterMidDetailInfo {
    bool is_open = 1;
    repeated AsterMidCampInfo camp_list = 2;
    uint32 collect_count = 3;
    uint32 begin_time = 4;
}

message AsterLargeDetailInfo {
    bool is_open = 1;
    uint32 begin_time = 2;
}

message AsterProgressDetailInfo {
    uint32 count = 1;
    uint32 last_auto_add_time = 2;
}

message AsterActivityDetailInfo {
    AsterLittleDetailInfo aster_little = 1;
    AsterMidDetailInfo aster_mid = 2;
    AsterLargeDetailInfo aster_large = 3;
    AsterProgressDetailInfo aster_progress = 5;
    uint32 aster_credit = 6;
    uint32 aster_token = 7;
    bool is_special_reward_taken = 8;
    bool is_content_closed = 9;
    uint32 content_close_time = 10;
}

message SelectAsterMidDifficultyReq {
    uint32 schedule_id = 1;
    uint32 gadget_entity_id = 2;
    uint32 difficulty_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2061;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SelectAsterMidDifficultyRsp {
    int32 retcode = 1;
    uint32 schedule_id = 2;
    uint32 gadget_entity_id = 3;
    uint32 difficulty_id = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2062;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message AsterProgressInfoNotify {
    AsterProgressDetailInfo info = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2063;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message AsterLittleInfoNotify {
    AsterLittleDetailInfo info = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2064;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message AsterMidInfoNotify {
    AsterMidDetailInfo info = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2065;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message AsterMiscInfoNotify {
    uint32 aster_credit = 1;
    uint32 aster_token = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2066;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TakeAsterSpecialRewardReq {
    uint32 schedule_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2067;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message TakeAsterSpecialRewardRsp {
    int32 retcode = 1;
    uint32 schedule_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2068;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message AsterLargeInfoNotify {
    AsterLargeDetailInfo info = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2069;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message FlightDailyRecord {
    bool is_touched = 1;
    uint32 best_score = 2;
    uint32 start_time = 3;
    repeated uint32 watcher_id_list = 4;
    uint32 group_id = 5;
}

message FlightActivityDetailInfo {
    repeated FlightDailyRecord daily_record_list = 1;
    uint32 preview_reward_id = 2;
    uint32 min_open_player_level = 3;
}

message FlightActivitySettleNotify {
    bool is_success = 1;
    uint32 left_time = 2;
    uint32 collect_num = 3;
    uint32 total_num = 4;
    uint32 score = 5;
    bool is_new_record = 6;
    uint32 medal_level = 7;
    uint32 group_id = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2070;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message FlightActivityRestartReq {
    uint32 schedule_id = 1;
    uint32 group_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2071;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message FlightActivityRestartRsp {
    int32 retcode = 1;
    uint32 schedule_id = 2;
    uint32 group_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2072;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message AsterMidCampInfoNotify {
    repeated AsterMidCampInfo camp_list = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2073;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message DragonSpineActivityDetailInfo {
    repeated DragonSpineChapterInfo chapter_info_list = 1;
    uint32 weapon_enhance_level = 2;
    uint32 shimmering_essence = 3;
    uint32 warm_essence = 4;
    uint32 wondrous_essence = 5;
    bool is_content_closed = 6;
    uint32 content_finish_time = 7;
}

message DragonSpineChapterInfo {
    uint32 chapter_id = 1;
    bool is_open = 2;
    uint32 progress = 3;
    uint32 finished_mission_num = 4;
    uint32 open_time = 5;
}

message DragonSpineChapterOpenNotify {
    uint32 schedule_id = 1;
    uint32 chapter_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2081;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message DragonSpineChapterProgressChangeNotify {
    uint32 schedule_id = 1;
    uint32 chapter_id = 2;
    uint32 cur_progress = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2082;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message DragonSpineChapterFinishNotify {
    uint32 schedule_id = 1;
    uint32 chapter_id = 2;
    uint32 weapon_enhance_level = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2083;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message DragonSpineCoinChangeNotify {
    uint32 schedule_id = 1;
    uint32 shimmering_essence = 2;
    uint32 warm_essence = 3;
    uint32 wondrous_essence = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2084;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ActivitySaleChangeNotify {
    uint32 sale_id = 1;
    bool is_close = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2085;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message EffigyDailyInfo {
    uint32 day_index = 1;
    uint32 begin_time = 2;
    uint32 challenge_id = 3;
    uint32 challenge_count = 4;
    uint32 challenge_max_score = 5;
    bool is_first_pass_reward_taken = 6;
    uint32 challenge_total_score = 7;
}

message EffigyActivityDetailInfo {
    repeated EffigyDailyInfo daily_info_list = 1;
    uint32 last_difficulty_id = 2;
    uint32 cur_score = 3;
    repeated uint32 taken_reward_index_list = 4;
}

message StartEffigyChallengeReq {
    uint32 challenge_id = 1;
    uint32 difficulty_id = 2;
    repeated uint32 condition_id_list = 3;
    uint32 point_id = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2101;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message StartEffigyChallengeRsp {
    int32 retcode = 1;
    uint32 challenge_id = 2;
    uint32 difficulty_id = 3;
    repeated uint32 condition_id_list = 4;
    uint32 point_id = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2102;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message EffigyChallengeInfoNotify {
    uint32 challenge_id = 1;
    uint32 difficulty_id = 2;
    repeated uint32 condition_id_list = 3;
    uint32 challenge_score = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2103;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message EffigyChallengeResultNotify {
    uint32 challenge_id = 1;
    bool is_success = 2;
    uint32 challenge_score = 3;
    uint32 challenge_max_score = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2104;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TakeEffigyFirstPassRewardReq {
    uint32 challenge_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2105;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message TakeEffigyFirstPassRewardRsp {
    int32 retcode = 1;
    uint32 challenge_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2106;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TakeEffigyRewardReq {
    uint32 reward_index = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2107;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message TakeEffigyRewardRsp {
    int32 retcode = 1;
    uint32 reward_index = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2108;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SelectEffigyChallengeConditionReq {
    uint32 challenge_id = 1;
    uint32 difficulty_id = 2;
    repeated uint32 condition_id_list = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2109;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SelectEffigyChallengeConditionRsp {
    int32 retcode = 1;
    uint32 challenge_id = 2;
    uint32 difficulty_id = 3;
    repeated uint32 condition_id_list = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2110;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TreasureMapRegionInfo {
    uint32 region_id = 1;
    uint32 start_time = 3;
    Vector region_center_pos = 4;
    uint32 region_radius = 5;
    uint32 current_progress = 6;
    uint32 goal_points = 7;
}

message TreasureMapBonusChallengeInfo {
    uint32 config_id = 1;
    bool is_active = 2;
    bool is_done = 3;
}

message TreasureMapActivityDetailInfo {
    repeated TreasureMapRegionInfo region_info_list = 1;
    uint32 active_region_index = 2;
    uint32 treasure_close_time = 3;
    uint32 preview_reward_id = 4;
    uint32 min_open_player_level = 5;
    uint32 currency_num = 6;
    repeated TreasureMapBonusChallengeInfo bonus_challenge_list = 7;
    bool is_mp_challenge_touched = 8;
}

message TreasureMapRegionInfoNotify {
    TreasureMapRegionInfo region_info = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2121;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TreasureMapCurrencyNotify {
    uint32 currency_num = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2124;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TreasureMapRegionActiveNotify {
    uint32 active_region_index = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2125;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TreasureMapMpChallengeNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2126;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TreasureMapBonusChallengeNotify {
    TreasureMapBonusChallengeInfo info = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2127;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TreasureMapGuideTaskDoneNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2128;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}
