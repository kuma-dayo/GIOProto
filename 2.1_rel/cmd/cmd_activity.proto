syntax = "proto3";

package proto;

import "define.proto";
import "cmd/cmd_gallery.proto";

message GetActivityScheduleReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2036;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivityScheduleInfo {
    uint32 activity_id = 1;
    bool is_open = 2;
    uint32 schedule_id = 3;
    uint32 begin_time = 4;
    uint32 end_time = 5;
}

message GetActivityScheduleRsp {
    int32 retcode = 1;
    repeated ActivityScheduleInfo activity_schedule_list = 2;
    uint32 remain_fly_sea_lamp_num = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2187;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GetActivityInfoReq {
    repeated uint32 activity_id_list = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2197;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivityInfo {
    uint32 activity_id = 1;
    uint32 schedule_id = 2;
    uint32 begin_time = 3;
    uint32 end_time = 4;
    uint32 activity_type = 5;
    bool is_play_open_anim = 6;
    bool is_finished = 7;
    bool is_starting = 8;
    repeated ActivityWatcherInfo watcher_info_list = 9;
    repeated uint32 meet_cond_list = 10;
    repeated uint32 expire_cond_list = 15;
    uint32 selected_avatar_reward_id = 17;
    map<uint32, uint32> activity_coin_map = 18;
    uint32 score_limit = 19;
    uint32 cur_score = 20;
    repeated uint32 taken_reward_list = 24;
    bool is_hidden = 26;
    uint32 first_day_start_time = 27;
    
    oneof detail {
        SeaLampActivityDetailInfo sam_lamp_info = 11;
        CrucibleActivityDetailInfo crucible_info = 12;
        SalesmanActivityDetailInfo salesman_info = 13;
        TrialAvatarActivityDetailInfo trial_avatar_info = 14;
        DeliveryActivityDetailInfo delivery_info = 16;
        AsterActivityDetailInfo aster_info = 21;
        FlightActivityDetailInfo flight_info = 25;
        DragonSpineActivityDetailInfo dragon_spine_info = 31;
        EffigyActivityDetailInfo effigy_info = 32;
        TreasureMapActivityDetailInfo treasure_map_info = 35;
        BlessingActivityDetailInfo blessing_info = 41;
        SeaLampActivityInfo sea_lamp_info = 42;
        ExpeditionActivityDetailInfo expedition_info = 43;
        ArenaChallengeActivityDetailInfo arena_challenge_info = 44;
        FleurFairActivityDetailInfo fleur_fair_info = 51;
        WaterSpiritActivityDetailInfo water_spirit_info = 52;
        ChannelerSlabActivityDetailInfo challneler_slab_info = 61;
        MistTrialActivityDetailInfo mist_trial_activity_info = 62;
        HideAndSeekActivityDetailInfo hide_and_seek_info = 63;
        FindHilichurlDetailInfo find_hilichurl_info = 64;
        SummerTimeDetailInfo summer_time_info = 65;
        BuoyantCombatDetailInfo buoyant_combat_info = 66;
        EchoShellDetailInfo echo_shell_info = 67;
        BounceConjuringActivityDetailInfo bounce_conjuring_info = 68;
        BlitzRushActivityDetailInfo blitz_rush_info = 69;
        ChessActivityDetailInfo chess_info = 70;
        SumoActivityDetailInfo sumo_info = 71;
        MoonfinTrialActivityDetailInfo moonfin_trial_info = 72;
        LunaRiteDetailInfo luna_rite_info = 73;
    }
}

message GetActivityInfoRsp {
    int32 retcode = 1;
    repeated ActivityInfo activity_info_list = 2;
    repeated uint32 activated_sale_id_list = 3;
    repeated Uint32Pair disable_transfer_point_interaction_list = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2011;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ActivityPlayOpenAnimNotify {
    uint32 activity_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2081;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivityInfoNotify {
    ActivityInfo activity_info = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2177;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivityScheduleInfoNotify {
    repeated ActivityScheduleInfo activity_schedule_list = 1;
    uint32 remain_fly_sea_lamp_num = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2068;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivityWatcherInfo {
    uint32 watcher_id = 1;
    uint32 cur_progress = 2;
    uint32 total_progress = 3;
    bool is_taken_reward = 4;
}

message ActivityTakeWatcherRewardReq {
    uint32 activity_id = 1;
    uint32 watcher_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2044;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivityTakeWatcherRewardRsp {
    int32 retcode = 1;
    uint32 activity_id = 2;
    uint32 watcher_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2123;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ActivityUpdateWatcherNotify {
    uint32 activity_id = 1;
    ActivityWatcherInfo watcher_info = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2099;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivitySelectAvatarCardReq {
    uint32 activity_id = 1;
    uint32 reward_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2002;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivitySelectAvatarCardRsp {
    int32 retcode = 1;
    uint32 activity_id = 2;
    uint32 reward_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2133;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ActivityCoinInfoNotify {
    uint32 schedule_id = 1;
    map<uint32, uint32> activity_coin_map = 2;
    uint32 activity_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2151;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SeaLampActivityDetailInfo {
    uint32 phase_id = 1;
    uint32 progress = 2;
    uint32 days = 3;
    uint32 contribution = 4;
    repeated uint32 taken_contribution_reward_list = 5;
    repeated uint32 taken_phase_reward_list = 6;
    uint32 factor = 7;
}

message SeaLampFlyLampReq {
    uint32 item_id = 1;
    uint32 item_num = 2;
    Vector pos = 3;
    int32 param = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2117;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SeaLampFlyLampRsp {
    int32 retcode = 1;
    uint32 item_id = 2;
    uint32 item_num = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2190;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SeaLampTakeContributionRewardReq {
    uint32 activity_id = 2;
    uint32 config_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2139;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SeaLampTakeContributionRewardRsp {
    int32 retcode = 1;
    uint32 config_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2047;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SeaLampTakePhaseRewardReq {
    uint32 activity_id = 2;
    uint32 phase_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2140;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SeaLampTakePhaseRewardRsp {
    int32 retcode = 1;
    uint32 phase_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2062;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SeaLampContributeItemReq {
    uint32 activity_id = 2;
    repeated ItemParam item_list = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2200;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SeaLampContributeItemRsp {
    int32 retcode = 1;
    uint32 total_contribution = 2;
    uint32 add_contribution = 3;
    uint32 add_progress = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2121;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SeaLampSectionInfo {
    uint32 section_id = 1;
}

message SeaLampActivityInfo {
    uint32 day_index = 1;
    uint32 popularity = 2;
    uint32 sea_lamp_coin = 3;
    bool is_content_closed = 4;
    repeated SeaLampSectionInfo section_info_list = 5;
    uint32 mechanicus_id = 6;
    bool is_mechanicus_open = 7;
    uint32 first_day_start_time = 8;
    bool is_mechanicus_feature_close = 9;
}

message SeaLampFlyLampNotify {
    uint32 item_id = 1;
    uint32 item_num = 2;
    Vector pos = 3;
    int32 param = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2118;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SeaLampCoinNotify {
    uint32 sea_lamp_coin = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2022;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SeaLampPopularityNotify {
    uint32 popularity = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2056;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message AnnounceData {
    uint32 config_id = 1;
    uint32 begin_time = 2;
    uint32 end_time = 3;
    string center_system_text = 4;
    string count_down_text = 5;
    string dungeon_confirm_text = 6;
    uint32 center_system_frequency = 7;
    uint32 count_down_frequency = 8;
    bool is_center_system_last_5_every_minutes = 9;
}

message LoadActivityTerrainNotify {
    uint32 activity_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2119;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ServerAnnounceNotify {
    repeated AnnounceData announce_data_list = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2030;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ServerAnnounceRevokeNotify {
    repeated uint32 config_id_list = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2054;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SalesmanActivityDetailInfo {
    SalesmanStatusType status = 1;
    uint32 day_index = 2;
    uint32 last_deliver_time = 3;
    uint32 deliver_count = 4;
    map<uint32, uint32> selected_reward_id_map = 5;
    uint32 day_reward_id = 6;
    uint32 special_reward_preview_id = 7;
    uint32 cond_day_count = 8;
    bool is_has_taken_special_reward = 9;
    bool is_today_has_delivered = 10;
}

message SalesmanDeliverItemReq {
    uint32 schedule_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2184;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SalesmanDeliverItemRsp {
    int32 retcode = 1;
    uint32 schedule_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2055;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SalesmanTakeRewardReq {
    uint32 schedule_id = 1;
    uint32 position = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2168;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SalesmanTakeRewardRsp {
    int32 retcode = 1;
    uint32 schedule_id = 2;
    uint32 reward_id = 3;
    uint32 position = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2096;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ActivityCondStateChangeNotify {
    uint32 schedule_id = 1;
    uint32 activity_id = 2;
    repeated uint32 meet_cond_list = 3;
    repeated uint32 expire_cond_list = 4;
    repeated uint32 activated_sale_id_list = 5;
    repeated Uint32Pair disable_transfer_point_interaction_list = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2166;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SalesmanTakeSpecialRewardReq {
    uint32 schedule_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2108;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SalesmanTakeSpecialRewardRsp {
    int32 retcode = 1;
    uint32 schedule_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2057;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GetAuthSalesmanInfoReq {
    uint32 schedule_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2028;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GetAuthSalesmanInfoRsp {
    int32 retcode = 1;
    uint32 schedule_id = 2;
    uint32 day_reward_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2152;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TrialAvatarActivityRewardDetailInfo {
    uint32 trial_avatar_index_id = 1;
    bool passed_dungeon = 2;
    bool received_reward = 3;
    uint32 reward_id = 4;
}

message TrialAvatarActivityDetailInfo {
    repeated TrialAvatarActivityRewardDetailInfo reward_info_list = 1;
}

message EnterTrialAvatarActivityDungeonReq {
    uint32 activity_id = 1;
    uint32 trial_avatar_index_id = 2;
    uint32 enter_point_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2048;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message EnterTrialAvatarActivityDungeonRsp {
    int32 retcode = 1;
    uint32 activity_id = 2;
    uint32 trial_avatar_index_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2154;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ReceivedTrialAvatarActivityRewardReq {
    uint32 trial_avatar_index_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2182;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ReceivedTrialAvatarActivityRewardRsp {
    int32 retcode = 1;
    uint32 activity_id = 2;
    uint32 trial_avatar_index_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2083;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TrialAvatarFirstPassDungeonNotify {
    uint32 trial_avatar_index_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2194;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TrialAvatarInDungeonIndexNotify {
    uint32 trial_avatar_index_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2003;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message CrucibleBattleUidInfo {
    uint32 uid = 1;
    string nickname = 2;
    uint32 icon = 3;
    string online_id = 4;
    ProfilePicture profile_picture = 5;
}

message CrucibleActivityDetailInfo {
    uint32 cost_time = 1;
    repeated CrucibleBattleUidInfo uid_info_list = 2;
    Vector pos = 3;
    uint32 battle_world_level = 4;
}

message DeliveryActivityDetailInfo {
    uint32 day_index = 1;
    repeated uint32 finished_delivery_quest_index = 2;
    bool is_taken_reward = 3;
}

message TakeDeliveryDailyRewardReq {
    uint32 schedule_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2110;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message TakeDeliveryDailyRewardRsp {
    int32 retcode = 1;
    uint32 schedule_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2019;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message FinishDeliveryNotify {
    uint32 schedule_id = 1;
    uint32 day_index = 2;
    uint32 finished_quest_index = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2161;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message AsterLittleDetailInfo {
    bool is_open = 1;
    uint32 stage_id = 2;
    AsterLittleStageState stage_state = 3;
    uint32 begin_time = 4;
    uint32 stage_begin_time = 5;
}

message AsterMidCampInfo {
    uint32 camp_id = 1;
    Vector pos = 2;
}

message AsterMidDetailInfo {
    bool is_open = 1;
    repeated AsterMidCampInfo camp_list = 2;
    uint32 collect_count = 3;
    uint32 begin_time = 4;
}

message AsterLargeDetailInfo {
    bool is_open = 1;
    uint32 begin_time = 2;
}

message AsterProgressDetailInfo {
    uint32 count = 1;
    uint32 last_auto_add_time = 2;
}

message AsterActivityDetailInfo {
    AsterLittleDetailInfo aster_little = 1;
    AsterMidDetailInfo aster_mid = 2;
    AsterLargeDetailInfo aster_large = 3;
    AsterProgressDetailInfo aster_progress = 5;
    uint32 aster_credit = 6;
    uint32 aster_token = 7;
    bool is_special_reward_taken = 8;
    bool is_content_closed = 9;
    uint32 content_close_time = 10;
}

message SelectAsterMidDifficultyReq {
    uint32 schedule_id = 1;
    uint32 gadget_entity_id = 2;
    uint32 difficulty_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2071;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SelectAsterMidDifficultyRsp {
    int32 retcode = 1;
    uint32 schedule_id = 2;
    uint32 gadget_entity_id = 3;
    uint32 difficulty_id = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2025;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message AsterProgressInfoNotify {
    AsterProgressDetailInfo info = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2095;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message AsterLittleInfoNotify {
    AsterLittleDetailInfo info = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2122;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message AsterMidInfoNotify {
    AsterMidDetailInfo info = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2111;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message AsterMiscInfoNotify {
    uint32 aster_credit = 1;
    uint32 aster_token = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2115;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TakeAsterSpecialRewardReq {
    uint32 schedule_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2126;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message TakeAsterSpecialRewardRsp {
    int32 retcode = 1;
    uint32 schedule_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2130;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message AsterLargeInfoNotify {
    AsterLargeDetailInfo info = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2185;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message FlightDailyRecord {
    bool is_touched = 1;
    uint32 best_score = 2;
    uint32 start_time = 3;
    repeated uint32 watcher_id_list = 4;
    uint32 group_id = 5;
}

message FlightActivityDetailInfo {
    repeated FlightDailyRecord daily_record_list = 1;
    uint32 preview_reward_id = 2;
    uint32 min_open_player_level = 3;
}

message FlightActivitySettleNotify {
    bool is_success = 1;
    uint32 left_time = 2;
    uint32 collect_num = 3;
    uint32 total_num = 4;
    uint32 score = 5;
    bool is_new_record = 6;
    uint32 medal_level = 7;
    uint32 group_id = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2179;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message FlightActivityRestartReq {
    uint32 schedule_id = 1;
    uint32 group_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2158;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message FlightActivityRestartRsp {
    int32 retcode = 1;
    uint32 schedule_id = 2;
    uint32 group_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2141;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message AsterMidCampInfoNotify {
    repeated AsterMidCampInfo camp_list = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2060;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message DragonSpineActivityDetailInfo {
    repeated DragonSpineChapterInfo chapter_info_list = 1;
    uint32 weapon_enhance_level = 2;
    uint32 shimmering_essence = 3;
    uint32 warm_essence = 4;
    uint32 wondrous_essence = 5;
    bool is_content_closed = 6;
    uint32 content_finish_time = 7;
}

message DragonSpineChapterInfo {
    uint32 chapter_id = 1;
    bool is_open = 2;
    uint32 progress = 3;
    uint32 finished_mission_num = 4;
    uint32 open_time = 5;
}

message DragonSpineChapterOpenNotify {
    uint32 schedule_id = 1;
    uint32 chapter_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2138;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message DragonSpineChapterProgressChangeNotify {
    uint32 schedule_id = 1;
    uint32 chapter_id = 2;
    uint32 cur_progress = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2052;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message DragonSpineChapterFinishNotify {
    uint32 schedule_id = 1;
    uint32 chapter_id = 2;
    uint32 weapon_enhance_level = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2076;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message DragonSpineCoinChangeNotify {
    uint32 schedule_id = 1;
    uint32 shimmering_essence = 2;
    uint32 warm_essence = 3;
    uint32 wondrous_essence = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2078;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ActivitySaleChangeNotify {
    uint32 sale_id = 1;
    bool is_close = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2100;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message EffigyDailyInfo {
    uint32 day_index = 1;
    uint32 begin_time = 2;
    uint32 challenge_id = 3;
    uint32 challenge_count = 4;
    uint32 challenge_max_score = 5;
    bool is_first_pass_reward_taken = 6;
    uint32 challenge_total_score = 7;
}

message EffigyActivityDetailInfo {
    repeated EffigyDailyInfo daily_info_list = 1;
    uint32 last_difficulty_id = 2;
    uint32 cur_score = 3;
    repeated uint32 taken_reward_index_list = 4;
}

message StartEffigyChallengeReq {
    uint32 challenge_id = 1;
    uint32 difficulty_id = 2;
    repeated uint32 condition_id_list = 3;
    uint32 point_id = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2195;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message StartEffigyChallengeRsp {
    int32 retcode = 1;
    uint32 challenge_id = 2;
    uint32 difficulty_id = 3;
    repeated uint32 condition_id_list = 4;
    uint32 point_id = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2026;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message EffigyChallengeInfoNotify {
    uint32 challenge_id = 1;
    uint32 difficulty_id = 2;
    repeated uint32 condition_id_list = 3;
    uint32 challenge_score = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2053;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message EffigyChallengeDungeonResultInfo {
    uint32 challenge_id = 1;
    bool is_success = 2;
    uint32 challenge_score = 3;
    uint32 challenge_max_score = 4;
    bool is_in_time_limit = 5;
}

message EffigyChallengeResultNotify {
    uint32 challenge_id = 1;
    bool is_success = 2;
    uint32 challenge_score = 3;
    uint32 challenge_max_score = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2144;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TakeEffigyFirstPassRewardReq {
    uint32 challenge_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2063;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message TakeEffigyFirstPassRewardRsp {
    int32 retcode = 1;
    uint32 challenge_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2198;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TakeEffigyRewardReq {
    uint32 reward_index = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2069;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message TakeEffigyRewardRsp {
    int32 retcode = 1;
    uint32 reward_index = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2034;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SelectEffigyChallengeConditionReq {
    uint32 challenge_id = 1;
    uint32 difficulty_id = 2;
    repeated uint32 condition_id_list = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2092;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SelectEffigyChallengeConditionRsp {
    int32 retcode = 1;
    uint32 challenge_id = 2;
    uint32 difficulty_id = 3;
    repeated uint32 condition_id_list = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2128;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RestartEffigyChallengeReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2064;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message RestartEffigyChallengeRsp {
    int32 retcode = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2189;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TreasureMapRegionInfo {
    uint32 region_id = 1;
    uint32 start_time = 3;
    Vector region_center_pos = 4;
    uint32 region_radius = 5;
    uint32 current_progress = 6;
    uint32 goal_points = 7;
    uint32 scene_id = 8;
    bool is_find_mp_spot = 9;
    bool is_done_mp_spot = 10;
}

message TreasureMapBonusChallengeInfo {
    uint32 config_id = 1;
    bool is_active = 2;
    bool is_done = 3;
    map<uint32, bool> fragment_map = 4;
    uint32 solution_id = 5;
}

message TreasureMapActivityDetailInfo {
    repeated TreasureMapRegionInfo region_info_list = 1;
    uint32 active_region_index = 2;
    uint32 treasure_close_time = 3;
    uint32 preview_reward_id = 4;
    uint32 min_open_player_level = 5;
    uint32 currency_num = 6;
    repeated TreasureMapBonusChallengeInfo bonus_challenge_list = 7;
    bool is_mp_challenge_touched = 8;
    uint32 total_mp_spot_num = 9;
}

message TreasureMapRegionInfoNotify {
    TreasureMapRegionInfo region_info = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2039;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TreasureMapCurrencyNotify {
    uint32 currency_num = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2021;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TreasureMapRegionActiveNotify {
    uint32 active_region_index = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2106;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TreasureMapMpChallengeNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2183;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TreasureMapBonusChallengeNotify {
    TreasureMapBonusChallengeInfo info = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2009;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TreasureMapGuideTaskDoneNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2046;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TreasureMapPreTaskDoneNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2018;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BlessingActivityDetailInfo {
    bool is_activated = 1;
    bool is_content_closed = 2;
    uint32 cur_day_scan_type = 3;
    uint32 cur_day_scan_num = 4;
    map<uint32, uint32> pic_num_map = 5;
    uint32 redeem_reward_num = 6;
    uint32 next_refresh_time = 7;
    uint32 content_close_time = 8;
}

message BlessingScanReq {
    uint32 entity_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2073;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message BlessingScanRsp {
    int32 retcode = 1;
    uint32 scan_pic_id = 2;
    uint32 cur_day_scan_num = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2180;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BlessingRedeemRewardReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2035;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message BlessingRedeemRewardRsp {
    int32 retcode = 1;
    map<uint32, uint32> pic_num_map = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2109;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BlessingFriendPicData {
    uint32 uid = 1;
    uint32 avatar_id = 2;
    string signature = 3;
    string nickname = 4;
    map<uint32, uint32> pic_num_map = 5;
    string remark_name = 6;
    ProfilePicture profile_picture = 7;
}

message BlessingRecvPicRecord {
    uint32 uid = 1;
    uint32 avatar_id = 2;
    string nickname = 3;
    string signature = 4;
    uint32 pic_id = 5;
    bool is_recv = 6;
    uint32 index = 7;
    string remark_name = 8;
    ProfilePicture profile_picture = 9;
}

message BlessingGetFriendPicListReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2159;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message BlessingGetFriendPicListRsp {
    int32 retcode = 1;
    repeated BlessingFriendPicData friend_pic_data_list = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2004;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BlessingGiveFriendPicReq {
    uint32 uid = 1;
    uint32 pic_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2020;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message BlessingGiveFriendPicRsp {
    int32 retcode = 1;
    uint32 uid = 2;
    uint32 pic_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2024;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BlessingAcceptGivePicReq {
    uint32 uid = 1;
    uint32 index = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2104;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message BlessingAcceptGivePicRsp {
    int32 retcode = 1;
    uint32 uid = 2;
    uint32 index = 3;
    uint32 pic_id = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2014;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BlessingGetAllRecvPicRecordListReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2101;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message BlessingGetAllRecvPicRecordListRsp {
    int32 retcode = 1;
    repeated BlessingRecvPicRecord recv_pic_record_list = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2164;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BlessingRecvFriendPicNotify {
    uint32 pic_id = 1;
    uint32 uid = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2006;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BlessingAcceptAllGivePicReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2148;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message BlessingAcceptAllGivePicRsp {
    int32 retcode = 1;
    map<uint32, uint32> accept_pic_num_map = 2;
    repeated uint32 accept_index_list = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2124;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ExpeditionPathInfo {
    uint32 path_id = 1;
    ExpeditionState state = 2;
    uint32 start_time = 3;
    repeated uint32 avatar_id_list = 4;
    uint32 assist_uid = 5;
    uint32 assist_avatar_id = 6;
    uint32 mark_id = 7;
    float bonus_probability = 8;
    uint32 challenge_id = 9;
    uint32 assist_costume_id = 10;
}

message ExpeditionChallengeInfo {
    uint32 id = 1;
    uint32 open_time = 2;
    bool is_finished = 3;
}

message ExpeditionActivityDetailInfo {
    repeated ExpeditionPathInfo path_info_list = 1;
    uint32 expedition_count = 2;
    repeated ExpeditionChallengeInfo challenge_info_list = 3;
    bool is_content_closed = 4;
    uint32 content_close_time = 5;
    uint32 cur_challenge_id = 6;
}

message ExpeditionStartReq {
    uint32 path_id = 1;
    repeated uint32 avatar_id_list = 2;
    uint32 assist_uid = 3;
    uint32 assist_avatar_id = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2105;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ExpeditionStartRsp {
    int32 retcode = 1;
    uint32 path_id = 2;
    repeated uint32 avatar_id_list = 3;
    uint32 assist_uid = 4;
    uint32 assist_avatar_id = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2156;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ExpeditionRecallReq {
    uint32 path_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2072;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ExpeditionRecallRsp {
    int32 retcode = 1;
    uint32 path_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2103;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ExpeditionTakeRewardReq {
    uint32 path_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2143;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ExpeditionTakeRewardRsp {
    int32 retcode = 1;
    uint32 path_id = 2;
    bool is_bonus = 3;
    uint32 reward_level = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2162;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ExpeditionAssistInfo {
    uint32 avatar_id = 1;
    uint32 assist_time = 2;
    string target_nick_name = 3;
    string online_id = 4;
    uint32 costume_id = 5;
}

message GetExpeditionAssistInfoListReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2090;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GetExpeditionAssistInfoListRsp {
    int32 retcode = 1;
    repeated ExpeditionAssistInfo assist_info_list = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2113;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SetCurExpeditionChallengeIdReq {
    uint32 id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2176;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SetCurExpeditionChallengeIdRsp {
    int32 retcode = 1;
    uint32 id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2031;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ExpeditionChallengeEnterRegionNotify {
    bool is_puzzle_finished = 1;
    uint32 id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2163;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ExpeditionChallengeFinishedNotify {
    uint32 id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2172;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message WaterSpiritActivityDetailInfo {
    uint32 region_search_id = 1;
    uint32 mp_play_id = 2;
    map<uint32, uint32> search_time_map = 3;
}

message FleurFairChapterInfo {
    uint32 chapter_id = 1;
    uint32 open_time = 2;
}

message FleurFairBalloonInfo {
    uint32 best_score = 1;
}

message FleurFairFallInfo {
    uint32 best_score = 1;
}

message FleurFairMusicRecord {
    uint32 max_score = 1;
    uint32 max_combo = 2;
    bool is_unlock = 3;
}

message FleurFairMusicGameInfo {
    map<uint32, FleurFairMusicRecord> music_record_map = 1;
}

message FleurFairMinigameInfo {
    uint32 minigame_id = 1;
    uint32 open_time = 2;
    bool is_open = 3;
    
    oneof detail {
        FleurFairBalloonInfo balloon_info = 11;
        FleurFairFallInfo fall_info = 12;
        FleurFairMusicGameInfo music_info = 13;
    }
}

message FleurFairDungeonSectionInfo {
    uint32 section_id = 1;
    uint32 open_time = 2;
    bool is_open = 3;
}

message FleurFairActivityDetailInfo {
    repeated FleurFairChapterInfo chapter_info_list = 1;
    bool is_content_closed = 2;
    uint32 content_close_time = 3;
    map<uint32, FleurFairMinigameInfo> minigame_info_map = 4;
    map<uint32, FleurFairDungeonSectionInfo> dungeon_section_info_map = 5;
    bool is_dungeon_unlocked = 6;
    uint32 dungeon_punish_over_time = 7;
    uint32 obtained_token = 8;
}

message FleurFairBalloonSettleInfo {
    BalloonSettleInfo settle_info = 1;
    bool is_new_record = 2;
}

message FleurFairFallSettleInfo {
    FallSettleInfo settle_info = 1;
    bool is_new_record = 2;
}

message FleurFairBalloonSettleNotify {
    map<uint32, FleurFairBalloonSettleInfo> settle_info_map = 1;
    uint32 minigame_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2067;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message FleurFairFallSettleNotify {
    map<uint32, FleurFairFallSettleInfo> settle_info_map = 1;
    uint32 minigame_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2145;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message FleurFairMusicGameSettleReq {
    uint32 music_basic_id = 1;
    uint32 score = 2;
    uint32 combo = 3;
    uint32 correct_hit = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2098;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message FleurFairMusicGameSettleRsp {
    int32 retcode = 1;
    uint32 music_basic_id = 2;
    bool is_unlock_next_level = 3;
    bool is_new_record = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2051;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message FleurFairMusicGameStartReq {
    uint32 music_basic_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2136;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message FleurFairMusicGameStartRsp {
    int32 retcode = 1;
    uint32 music_basic_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2102;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message FleurFairReplayMiniGameReq {
    uint32 minigame_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2116;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message FleurFairReplayMiniGameRsp {
    int32 retcode = 1;
    uint32 minigame_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2077;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ArenaChallengeMonsterLevel {
    uint32 arena_challenge_id = 1;
    uint32 arena_challenge_level = 2;
    uint32 monster_level = 3;
}

message ArenaChallengeActivityDetailInfo {
    uint32 world_level = 1;
    repeated ArenaChallengeMonsterLevel level_list = 2;
    map<uint32, uint32> level_open_time_map = 3;
}

message StartArenaChallengeLevelReq {
    uint32 gadget_entity_id = 1;
    uint32 arena_challenge_id = 2;
    uint32 arena_challenge_level = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2088;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message StartArenaChallengeLevelRsp {
    int32 retcode = 1;
    uint32 gadget_entity_id = 2;
    uint32 arena_challenge_id = 3;
    uint32 arena_challenge_level = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2059;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ArenaChallengeChildChallengeInfo {
    uint32 challenge_index = 1;
    uint32 challenge_id = 2;
    uint32 challenge_type = 3;
    bool is_success = 4;
    bool is_settled = 5;
}

message ArenaChallengeFinishNotify {
    uint32 arena_challenge_id = 1;
    uint32 arena_challenge_level = 2;
    bool is_success = 3;
    repeated ArenaChallengeChildChallengeInfo child_challenge_list = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2173;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message WaterSpritePhaseFinishNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2127;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ActivityTakeWatcherRewardBatchReq {
    uint32 activity_id = 1;
    repeated uint32 watcher_id_list = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2049;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivityTakeWatcherRewardBatchRsp {
    int32 retcode = 1;
    uint32 activity_id = 2;
    repeated uint32 watcher_id_list = 3;
    repeated ItemParam item_list = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 2066;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ChannelerSlabCamp {
    uint32 group_id = 1;
    uint32 reward_id = 2;
    Vector pos = 3;
    uint32 buff_num = 4;
}

message ChannelerSlabChallenge {
    repeated ChannelerSlabCamp camp_list = 1;
    uint32 active_camp_index = 2;
}

message ChannelerSlabOneoffDungeon {
    uint32 dungeon_id = 1;
    bool is_done = 2;
    uint32 reward_id = 3;
}

message ChannelerSlabChallengeStage {
    uint32 stage_id = 1;
    uint32 open_time = 2;
    repeated ChannelerSlabChallenge challenge_list = 3;
    ChannelerSlabOneoffDungeon dungeon_info = 4;
    bool is_open = 5;
}

message ChannellerSlabBuffSchemeInfo {
    map<uint32, uint32> slot_map = 1;
    uint32 total_energy = 2;
    uint32 self_energy = 3;
}

message ChannellerSlabAssistInfo {
    uint32 uid = 1;
    uint32 avatar_id = 2;
    uint32 avatar_level = 3;
}

message ChannellerSlabBuffInfo {
    repeated uint32 buff_id_list = 1;
    ChannellerSlabBuffSchemeInfo single_buff_scheme_info = 2;
    ChannellerSlabBuffSchemeInfo mp_buff_scheme_info = 3;
    repeated ChannellerSlabAssistInfo assist_info_list = 4;
}

message ChannellerSlabLoopDungeonInfo {
    uint32 dungeon_index = 1;
    uint32 score = 2;
    bool is_first_pass_reward_taken = 3;
    repeated uint32 last_condition_id_list = 4;
    uint32 open_time = 5;
    bool is_open = 6;
}

message ChannellerSlabLoopDungeonStageInfo {
    repeated ChannellerSlabLoopDungeonInfo dungeon_info_list = 1;
    uint32 last_difficulty_id = 2;
    repeated uint32 taken_reward_index_list = 3;
    uint32 open_time = 4;
    bool is_open = 5;
}

message ChannelerSlabActivityDetailInfo {
    repeated ChannelerSlabChallengeStage stage_list = 1;
    uint32 play_end_time = 2;
    ChannellerSlabBuffInfo buff_info = 3;
    ChannellerSlabLoopDungeonStageInfo loop_dungeon_stage_info = 4;
}

message ChannelerSlabStageActiveChallengeIndexNotify {
    uint32 stage_id = 1;
    uint32 challenge_index = 2;
    uint32 active_camp_index = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8361;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ChannelerSlabStageOneoffDungeonNotify {
    uint32 stage_id = 1;
    bool is_done = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8797;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ChannellerSlabWearBuffReq {
    uint32 buff_id = 1;
    uint32 slot_id = 2;
    bool is_mp = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8154;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ChannellerSlabWearBuffRsp {
    int32 retcode = 1;
    uint32 buff_id = 2;
    uint32 slot_id = 3;
    bool is_mp = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8163;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ChannellerSlabTakeoffBuffReq {
    uint32 buff_id = 1;
    uint32 slot_id = 2;
    bool is_mp = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8013;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ChannellerSlabTakeoffBuffRsp {
    int32 retcode = 1;
    uint32 buff_id = 2;
    uint32 slot_id = 3;
    bool is_mp = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8282;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ChannellerSlabEnterLoopDungeonReq {
    uint32 dungeon_index = 1;
    uint32 difficulty_id = 2;
    repeated uint32 condition_id_list = 3;
    uint32 point_id = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8846;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ChannellerSlabEnterLoopDungeonRsp {
    int32 retcode = 1;
    uint32 dungeon_index = 2;
    uint32 difficulty_id = 3;
    repeated uint32 condition_id_list = 4;
    uint32 point_id = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8212;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ChannellerSlabLoopDungeonTakeFirstPassRewardReq {
    uint32 dungeon_index = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8161;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ChannellerSlabLoopDungeonTakeFirstPassRewardRsp {
    int32 retcode = 1;
    uint32 dungeon_index = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8132;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ChannellerSlabLoopDungeonTakeScoreRewardReq {
    uint32 reward_index = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8098;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ChannellerSlabLoopDungeonTakeScoreRewardRsp {
    int32 retcode = 1;
    uint32 reward_index = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8781;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ChannellerSlabLoopDungeonChallengeInfoNotify {
    uint32 dungeon_index = 1;
    uint32 difficulty_id = 2;
    repeated uint32 condition_id_list = 3;
    uint32 challenge_score = 4;
    repeated uint32 scheme_buff_id_list = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8365;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ChannellerSlabLoopDungeonSelectConditionReq {
    uint32 dungeon_index = 1;
    uint32 difficulty_id = 2;
    repeated uint32 condition_id_list = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8793;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ChannellerSlabLoopDungeonSelectConditionRsp {
    int32 retcode = 1;
    uint32 dungeon_index = 2;
    uint32 difficulty_id = 3;
    repeated uint32 condition_id_list = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8399;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ChannellerSlabLoopDungeonResultInfo {
    uint32 dungeon_index = 1;
    bool is_success = 2;
    uint32 challenge_score = 3;
    uint32 challenge_max_score = 4;
    bool is_in_time_limit = 5;
}

message ChannellerSlabOneOffDungeonInfoReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8854;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ChannellerSlabOneOffDungeonInfoRsp {
    int32 retcode = 1;
    repeated uint32 scheme_buff_id_list = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8290;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ChannellerSlabOneOffDungeonInfoNotify {
    repeated uint32 scheme_buff_id_list = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8526;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ChannellerSlabSaveAssistInfoReq {
    repeated ChannellerSlabAssistInfo assist_info_list = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8596;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ChannellerSlabSaveAssistInfoRsp {
    int32 retcode = 1;
    repeated ChannellerSlabAssistInfo assist_info_list = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8856;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MistTrialLevelData {
    uint32 level_id = 1;
    bool is_open = 2;
    uint32 open_time = 3;
}

message MistTrialActivityDetailInfo {
    repeated MistTrialLevelData trial_level_data_list = 1;
}

message MistTrialSelectAvatarAndEnterDungeonReq {
    repeated uint32 select_trial_avatar_id_list = 1;
    uint32 trial_id = 2;
    uint32 enter_point_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8628;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message MistTrialSelectAvatarAndEnterDungeonRsp {
    int32 retcode = 1;
    uint32 trial_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8228;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MistTrialMissionInfo {
    uint32 watcher_list_id = 1;
    uint32 param = 2;
}

message MistTrialGetChallengeMissionReq {
    uint32 trial_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8798;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message MistTrialGetChallengeMissionRsp {
    int32 retcode = 1;
    uint32 trial_id = 2;
    repeated MistTrialMissionInfo mission_info_list = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8238;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MistTrialDunegonFailNotify {
    int32 dungeon_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8869;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ChannellerSlabCheckEnterLoopDungeonReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8620;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ChannellerSlabCheckEnterLoopDungeonRsp {
    int32 retcode = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8582;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message HideAndSeekActivityDetailInfo {
    repeated uint32 chosen_hunter_skill_list = 1;
    repeated uint32 chosen_hider_skill_list = 2;
    repeated uint32 unlock_map_list = 3;
}

message HideAndSeekSelectSkillReq {
    repeated uint32 skill_list = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8376;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message HideAndSeekSelectSkillRsp {
    int32 retcode = 1;
    repeated uint32 skill_list = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8734;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ActivityTakeScoreRewardReq {
    uint32 activity_id = 1;
    uint32 reward_config_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8122;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivityTakeScoreRewardRsp {
    int32 retcode = 1;
    uint32 activity_id = 2;
    uint32 reward_config_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8206;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ActivityTakeAllScoreRewardReq {
    uint32 activity_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8011;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ActivityTakeAllScoreRewardRsp {
    int32 retcode = 1;
    uint32 activity_id = 2;
    repeated uint32 reward_config_list = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8864;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message FindHilichurlDayContentInfo {
    uint32 start_time = 1;
}

message FindHilichurlDetailInfo {
    uint32 day_index = 1;
    uint32 player_day_index = 2;
    repeated FindHilichurlDayContentInfo day_content_info_list = 3;
    bool is_content_closed = 4;
    uint32 content_close_time = 5;
    uint32 min_open_player_level = 6;
    bool is_end_quest_accept = 7;
}

message CommonPlayerTipsNotify {
    repeated string text_map_id_list = 1;
    uint32 notify_type = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8731;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message FindHilichurlFinishSecondQuestNotify {
    uint32 day_index = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8972;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message FindHilichurlAcceptQuestNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8031;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SummerTimeSprintBoatRecord {
    bool is_touched = 1;
    uint32 best_score = 2;
    uint32 start_time = 3;
    repeated uint32 watcher_id_list = 4;
    uint32 group_id = 5;
}

message SummerTimeSprintBoatInfo {
    repeated SummerTimeSprintBoatRecord record_list = 1;
}

message SummerTimeDetailInfo {
    map<uint32, SummerTimeStageInfo> stage_map = 1;
    bool is_content_closed = 2;
    uint32 content_close_time = 3;
    SummerTimeSprintBoatInfo sprint_boat_info = 4;
}

message SummerTimeStageInfo {
    uint32 stage_id = 1;
    bool is_open = 2;
    uint32 open_time = 3;
}

message SummerTimeFloatSignalPositionNotify {
    uint32 float_signal_id = 1;
    Vector position = 2;
    bool is_transfer_anchor = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8776;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SummerTimeFloatSignalUpdateNotify {
    uint32 float_signal_id = 1;
    Vector position = 2;
    bool is_transfer_anchor = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8319;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SummerTimeSprintBoatSettleNotify {
    bool is_success = 1;
    uint32 left_time = 2;
    uint32 collect_num = 3;
    uint32 total_num = 4;
    uint32 score = 5;
    bool is_new_record = 6;
    uint32 medal_level = 7;
    uint32 group_id = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8956;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SummerTimeSprintBoatRestartReq {
    uint32 schedule_id = 1;
    uint32 group_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8061;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SummerTimeSprintBoatRestartRsp {
    int32 retcode = 1;
    uint32 schedule_id = 2;
    uint32 group_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8577;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BuoyantCombatDailyInfo {
    uint32 best_score = 1;
    uint32 start_time = 2;
}

message BuoyantCombatDetailInfo {
    repeated BuoyantCombatDailyInfo daily_info_list = 1;
}

message StartBuoyantCombatGalleryReq {
    uint32 gallery_id = 1;
    uint32 gallery_level = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8711;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message StartBuoyantCombatGalleryRsp {
    int32 retcode = 1;
    uint32 gallery_id = 2;
    uint32 gallery_level = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8379;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BuoyantCombatSettleInfo {
    BuoyantCombatGallerySettleInfo settle_info = 1;
    bool is_new_record = 2;
}

message BuoyantCombatSettleNotify {
    BuoyantCombatSettleInfo settle_info = 1;
    uint32 gallery_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8652;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SetLimitOptimizationNotify {
    bool is_active = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8410;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message EchoShellDetailInfo {
    repeated uint32 taken_reward_list = 1;
    repeated uint32 shell_list = 2;
}

message EchoShellUpdateNotify {
    uint32 shell_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8770;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message EchoShellTakeRewardReq {
    uint32 reward_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8758;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message EchoShellTakeRewardRsp {
    int32 retcode = 1;
    uint32 reward_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8850;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BounceConjuringChapterInfo {
    uint32 chapter_id = 1;
    uint32 best_score = 2;
    uint32 open_time = 3;
}

message BounceConjuringActivityDetailInfo {
    repeated BounceConjuringChapterInfo chapter_info_list = 1;
    uint32 content_close_time = 2;
    bool is_content_closed = 3;
}

message BounceConjuringSettleNotify {
    map<uint32, BounceConjuringGallerySettleInfo> settle_info_map = 1;
    bool is_new_record = 2;
    uint32 total_score = 3;
    uint32 chapter_id = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8520;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message BlitzRushStage {
    uint32 open_time = 1;
    bool is_open = 2;
}

message ParkourLevelInfo {
    uint32 open_time = 1;
    uint32 best_record = 2;
    bool is_open = 3;
    Vector pos = 4;
}

message BlitzRushActivityDetailInfo {
    repeated BlitzRushStage stage_list = 1;
    uint32 content_close_time = 2;
    repeated ParkourLevelInfo parkour_level_info_list = 3;
    bool is_content_closed = 4;
}

message BlitzRushParkourRestartReq {
    uint32 schedule_id = 1;
    uint32 group_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8283;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message BlitzRushParkourRestartRsp {
    int32 retcode = 1;
    uint32 schedule_id = 2;
    uint32 group_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8507;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ChessActivityDetailInfo {
    uint32 level = 1;
    uint32 exp = 2;
    bool is_teach_dungeon_finished = 3;
    uint32 obtained_exp = 4;
    uint32 available_exp = 5;
    repeated uint32 finished_map_id_list = 6;
    uint32 punish_over_time = 7;
    uint32 content_close_time = 8;
    bool is_content_closed = 9;
}

message EnterChessDungeonReq {
    uint32 map_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8378;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message EnterChessDungeonRsp {
    int32 retcode = 1;
    uint32 map_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8684;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TreasureMapHostInfoNotify {
    repeated uint32 mp_challenge_region_list = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8160;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SumoActivityDetailInfo {
    map<uint32, SumoStageData> sumo_stage_map = 1;
    uint32 difficulty_id = 2;
}

message SumoAvatarInfo {
    bool is_trial = 1;
    uint64 avatar_id = 2;
}

message SumoTeamData {
    repeated SumoAvatarInfo avatar_info_list = 1;
    repeated uint32 skill_id_list = 2;
}

message SumoStageData {
    uint32 stage_id = 1;
    uint32 max_score = 2;
    uint32 open_time = 3;
    bool is_open = 4;
    repeated SumoTeamData team_list = 5;
}

message SumoSaveTeamReq {
    uint32 activity_id = 1;
    uint32 stage_id = 2;
    uint32 difficulty_id = 3;
    repeated SumoTeamData team_list = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8812;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SumoSaveTeamRsp {
    int32 retcode = 1;
    uint32 activity_id = 2;
    uint32 stage_id = 3;
    uint32 difficulty_id = 4;
    repeated SumoTeamData team_list = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8518;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SumoSelectTeamAndEnterDungeonReq {
    uint32 activity_id = 1;
    uint32 stage_id = 2;
    uint32 difficulty_id = 3;
    repeated SumoTeamData team_list = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8094;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SumoSelectTeamAndEnterDungeonRsp {
    int32 retcode = 1;
    uint32 activity_id = 2;
    uint32 stage_id = 3;
    uint32 difficulty_id = 4;
    repeated SumoTeamData team_list = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8533;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SumoDungeonSettleNotify {
    uint32 stage_id = 1;
    uint32 difficulty_id = 2;
    uint32 final_score = 3;
    bool is_new_record = 4;
    uint32 kill_monster_num = 5;
    uint32 kill_elite_monster_num = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8505;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SumoDungeonAvatar {
    uint64 avatar_guid = 1;
    bool is_trial = 2;
    bool is_avlive = 3;
}

message SumoDungeonTeam {
    repeated SumoDungeonAvatar dungeon_avatar_list = 1;
}

message SumoEnterDungeonNotify {
    uint32 activity_id = 1;
    uint32 stage_id = 2;
    repeated SumoDungeonTeam dungeon_team_list = 3;
    uint32 cur_team_index = 4;
    uint32 next_valid_switch_time = 5;
    uint32 no_switch_punish_time = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8312;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SumoSwitchTeamReq {
    uint32 activity_id = 1;
    uint32 stage_id = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8813;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SumoSwitchTeamRsp {
    int32 retcode = 1;
    uint32 activity_id = 2;
    uint32 stage_id = 3;
    uint32 cur_team_index = 4;
    repeated SumoDungeonTeam dungeon_team_list = 5;
    uint32 next_valid_switch_time = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8539;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SumoLeaveDungeonNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8250;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SumoRestartDungeonReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8530;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SumoRestartDungeonRsp {
    int32 retcode = 1;
    uint32 point_id = 2;
    uint32 dungeon_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8407;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ActivityDisableTransferPointInteractionNotify {
    Uint32Pair scene_point_pair = 1;
    bool is_disable = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8016;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SumoSetNoSwitchPunishTimeNotify {
    uint32 activity_id = 1;
    uint32 stage_id = 2;
    repeated SumoDungeonTeam dungeon_team_list = 3;
    uint32 cur_team_index = 4;
    uint32 next_valid_switch_time = 5;
    uint32 no_switch_punish_time = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8815;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message MoonfinTrialLevelInfo {
    uint32 best_record = 1;
    uint32 open_time = 2;
}

message MoonfinTrialActivityDetailInfo {
    map<uint32, MoonfinTrialLevelInfo> level_info_map = 1;
    uint32 special_fish_count = 2;
}

message FishingGallerySettleNotify {
    FishingGallerySettleInfo settle_info = 1;
    uint32 gallery_id = 2;
    uint32 level_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8538;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message LunaRiteHintPoint {
    uint32 index = 1;
    uint32 area_id = 2;
    Vector pos = 3;
    LunaRiteHintPointType type = 4;
}

message LunaRiteAreaInfo {
    uint32 area_id = 1;
    uint32 challenge_index = 2;
    repeated uint32 sacrifice_list = 3;
    repeated uint32 sacrifice_reward_list = 4;
    LunaRiteHintStatusType hint_status = 5;
}

message LunaRiteDetailInfo {
    repeated LunaRiteAreaInfo area_info_list = 1;
    repeated LunaRiteHintPoint hint_point = 2;
}

message LunaRiteSacrificeReq {
    uint32 area_id = 1;
    uint32 index = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8903;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message LunaRiteSacrificeRsp {
    int32 retcode = 1;
    uint32 area_id = 2;
    uint32 index = 3;
    repeated uint32 sacrifice_list = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8558;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message LunaRiteTakeSacrificeRewardReq {
    uint32 area_id = 1;
    uint32 index = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8315;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message LunaRiteTakeSacrificeRewardRsp {
    int32 retcode = 1;
    uint32 area_id = 2;
    uint32 index = 3;
    repeated uint32 sacrifice_reward_list = 4;
    uint32 sacrifice_reward_index = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8889;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message LunaRiteHintPointReq {
    uint32 area_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8123;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message LunaRiteHintPointRsp {
    int32 retcode = 1;
    uint32 area_id = 2;
    repeated LunaRiteHintPoint hint_point = 3;
    LunaRiteHintStatusType hint_status = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8336;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message LunaRiteHintPointRemoveNotify {
    repeated uint32 hint_point_index = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8311;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message LunaRiteGroupBundleRegisterNotify {
    uint32 group_link_bundle_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8414;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message LunaRiteAreaFinishNotify {
    uint32 area_id = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 8883;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}
