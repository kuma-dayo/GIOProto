syntax = "proto3";

package proto;

import "define.proto";

message GetPlayerTokenReq {
    string account_token = 10;
    string account_uid = 11;
    string psn_region = 4;
    string online_id = 7;
    uint32 channel_id = 15;
    string account_ext = 9;
    string country_code = 5;
    string client_rand_key = 760;
    bool is_guest = 6;
    string birthday = 1718;
    uint32 sub_channel_id = 8;
    uint32 platform_type = 12;
    string client_ip_str = 3;
    string psn_id = 13;
    uint32 account_type = 1;
    uint32 minors_reg_min_age = 995;
    uint32 cloud_client_ip = 14;
    uint32 key_id = 1787;
    uint32 uid = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 172;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GetPlayerTokenRsp {
    string birthday = 937;
    int32 retcode = 2;
    bytes security_cmd_buffer = 6;
    uint64 secret_key_seed = 13;
    string country_code = 2013;
    bytes extra_bin_data = 3;
    string secret_key = 15;
    uint32 minors_reg_min_age = 1561;
    uint32 black_uid_end_time = 14;
    uint32 tag = 1635;
    string token = 11;
    uint32 gm_uid = 10;
    uint32 channel_id = 896;
    string psn_id = 1811;
    string client_ip_str = 860;
    string msg = 7;
    uint32 account_type = 5;
    uint32 sub_channel_id = 1802;
    bool is_watchdog_uid = 2028;
    string server_rand_key = 1493;
    bool is_proficient_player = 9;
    uint32 key_id = 1172;
    uint32 uid = 1;
    string account_uid = 12;
    bool is_guest = 4;
    string client_version_random_key = 1529;
    repeated uint32 finish_collection_id_list = 1640;
    uint32 platform_type = 8;
    uint32 reg_platform = 1112;
    bool is_login_white_list = 573;
    string sign = 1140;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 198;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TrackingIOInfo {
    string rydevicetype = 11;
    string mac = 6;
    string deviceid = 9;
    string client_tz = 5;
    string current_caid = 7;
    string cached_caid = 15;
    string appid = 1;
}

message AdjustTrackingInfo {
    string event_token = 9;
    string adid = 4;
    string idfa = 2;
    string app_token = 14;
    string gps_adid = 3;
    string fire_adid = 13;
}

message PlayerLoginReq {
    uint32 language_type = 6;
    uint32 reg_platform = 615;
    TrackingIOInfo tracking_io_info = 1660;
    uint32 account_type = 13;
    string token = 15;
    bytes extra_bin_data = 1458;
    uint32 channel_id = 1314;
    uint32 client_data_version = 688;
    string account_uid = 2;
    string client_version = 12;
    string security_library_md5 = 772;
    string country_code = 2000;
    string psn_id = 1268;
    uint32 client_port = 431;
    string device_name = 9;
    string cps = 1163;
    uint64 login_rand = 3;
    uint32 target_home_param = 984;
    AdjustTrackingInfo adjust_tracking_info = 1816;
    bool is_transfer = 908;
    uint32 tag = 1787;
    bool is_guest = 5;
    bytes environment_error_code = 2026;
    string online_id = 903;
    bool is_editor = 8;
    string checksum_client_version = 861;
    bytes security_cmd_reply = 1995;
    string security_library_version = 1213;
    string birthday = 1652;
    string device_uuid = 4;
    uint32 client_token = 1546;
    uint32 sub_channel_id = 23;
    uint32 target_uid = 11;
    string device_info = 1;
    string client_verison_hash = 1707;
    string checksum = 1532;
    uint32 platform_type = 14;
    uint32 target_home_owner_uid = 1864;
    uint32 cloud_client_ip = 1335;
    uint32 gm_uid = 612;
    string system_version = 10;
    string platform = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 112;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ShortAbilityHashPair {
    sfixed32 ability_config_hash = 15;
    sfixed32 ability_name_hash = 1;
}

message PlayerLoginRsp {
    map<string, int32> ability_hash_map = 11;
    bool is_audit = 1685;
    bool is_new_player = 8;
    ResVersionConfig res_version_config = 1969;
    bool is_enable_client_hash_debug = 932;
    string client_md5 = 1830;
    uint32 client_data_version = 1;
    string country_code = 1900;
    bool is_relogin = 10;
    bytes player_data = 13;
    string game_biz = 5;
    map<uint32, BlockInfo> block_info_map = 571;
    string register_cps = 2040;
    ResVersionConfig next_res_version_config = 1573;
    bool is_transfer = 2018;
    uint32 target_home_owner_uid = 553;
    repeated ShortAbilityHashPair short_ability_hash_map = 250;
    int32 ability_hash_code = 12;
    bool is_sc_open = 1429;
    uint32 client_silence_data_version = 6;
    string birthday = 624;
    bool is_use_ability_hash = 2;
    string client_silence_version_suffix = 1299;
    uint32 player_data_version = 7;
    bool is_data_need_relogin = 951;
    repeated FeatureBlockInfo feature_block_info_list = 1352;
    string client_silence_md5 = 1746;
    uint32 target_uid = 14;
    double total_tick_time = 125;
    uint64 login_rand = 4;
    bytes sc_info = 2024;
    string client_version_suffix = 1047;
    string next_resource_url = 621;
    int32 retcode = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 135;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlayerLogoutReq {
    Reason reason = 6;
    enum Reason {
        DISCONNECT = 0;
        CLIENT_REQ = 1;
        TIMEOUT = 2;
        ADMIN_REQ = 3;
        SERVER_CLOSE = 4;
        GM_CLEAR = 5;
        PLAYER_TRANSFER = 6;
        CLIENT_CHECKSUM_INVALID = 7;
    }
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 107;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PlayerLogoutRsp {
    int32 retcode = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 121;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlayerLogoutNotify {
    int32 retcode = 13;
    
    enum CmdId {
        NONE = 0;
        CMD_ID = 103;
    }
}

message PlayerDataNotify {
    uint64 server_time = 7;
    string nick_name = 8;
    bool is_first_login_today = 12;
    uint32 region_id = 6;
    map<uint32, PropValue> prop_map = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 190;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ChangeGameTimeReq {
    uint32 game_time = 6;
    bool is_force_set = 11;
    uint32 extra_days = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 173;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ChangeGameTimeRsp {
    int32 retcode = 8;
    uint32 extra_days = 5;
    uint32 cur_game_time = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 199;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlayerGameTimeNotify {
    uint32 uid = 7;
    uint32 game_time = 3;
    bool is_home = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 131;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PlayerPropNotify {
    map<uint32, PropValue> prop_map = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 175;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ClientTriggerEventNotify {
    uint32 force_id = 3;
    EventTriggerType event_type = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 148;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SetPlayerPropReq {
    repeated PropValue prop_list = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 197;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SetPlayerPropRsp {
    int32 retcode = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 181;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SetPlayerBornDataReq {
    uint32 avatar_id = 2;
    string nick_name = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 105;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SetPlayerBornDataRsp {
    int32 retcode = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 182;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message DoSetPlayerBornDataNotify {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 147;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlayerPropChangeNotify {
    uint32 prop_delta = 13;
    uint32 prop_type = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 139;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SetPlayerNameReq {
    string nick_name = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 153;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SetPlayerNameRsp {
    int32 retcode = 9;
    string nick_name = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 122;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message SetOpenStateReq {
    uint32 key = 12;
    uint32 value = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 165;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message SetOpenStateRsp {
    uint32 key = 9;
    int32 retcode = 14;
    uint32 value = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 104;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message OpenStateUpdateNotify {
    map<uint32, uint32> open_state_map = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 193;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message OpenStateChangeNotify {
    map<uint32, uint32> open_state_map = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 127;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlayerCookReq {
    uint32 cook_count = 1;
    uint32 qte_quality = 12;
    uint32 recipe_id = 8;
    uint32 assist_avatar = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 194;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PlayerCookRsp {
    repeated ItemParam extral_item_list = 15;
    uint32 cook_count = 12;
    repeated ItemParam item_list = 11;
    int32 retcode = 3;
    uint32 qte_quality = 5;
    CookRecipeData recipe_data = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 188;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlayerRandomCookReq {
    repeated ItemParam material_list = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 126;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PlayerRandomCookRsp {
    int32 retcode = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 163;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message CookRecipeData {
    uint32 proficiency = 13;
    uint32 recipe_id = 9;
}

message CookDataNotify {
    repeated CookRecipeData recipe_data_list = 2;
    uint32 grade = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 195;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message CookRecipeDataNotify {
    CookRecipeData recipe_data = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 106;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message CookGradeDataNotify {
    uint32 grade = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 134;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlayerCompoundMaterialReq {
    uint32 count = 11;
    uint32 compound_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 150;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message CompoundQueueData {
    uint32 output_count = 1;
    uint32 compound_id = 4;
    uint32 output_time = 14;
    uint32 wait_count = 8;
}

message PlayerCompoundMaterialRsp {
    CompoundQueueData compound_que_data = 5;
    int32 retcode = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 143;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TakeCompoundOutputReq {
    uint32 compound_group_id = 3;
    uint32 compound_id = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 174;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message TakeCompoundOutputRsp {
    repeated ItemParam item_list = 6;
    int32 retcode = 2;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 176;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message CompoundDataNotify {
    repeated uint32 unlock_compound_list = 1;
    repeated CompoundQueueData compound_que_data_list = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 146;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GetCompoundDataReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 141;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GetCompoundDataRsp {
    int32 retcode = 3;
    repeated uint32 unlock_compound_list = 11;
    repeated CompoundQueueData compound_que_data_list = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 149;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlayerTimeNotify {
    uint64 server_time = 5;
    uint64 player_time = 11;
    bool is_paused = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 191;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlayerSetPauseReq {
    bool is_paused = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 124;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PlayerSetPauseRsp {
    int32 retcode = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 156;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlayerSetLanguageReq {
    uint32 language_type = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 142;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PlayerSetLanguageRsp {
    int32 retcode = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 130;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message DataResVersionNotify {
    string client_silence_md5 = 10;
    string client_silence_version_suffix = 15;
    ResVersionConfig res_version_config = 9;
    bool is_data_need_relogin = 7;
    
    DataResVersionOpType op_type = 12;
    enum DataResVersionOpType {
        OP_TYPE_NONE = 0;
        OP_TYPE_RELOGIN = 1;
        OP_TYPE_MP_RELOGIN = 2;
    }
    
    uint32 client_data_version = 2;
    string client_version_suffix = 5;
    uint32 client_silence_data_version = 1;
    string client_md5 = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 167;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message DailyTaskInfo {
    uint32 reward_id = 3;
    uint32 progress = 13;
    uint32 finish_progress = 10;
    uint32 daily_task_id = 4;
    bool is_finished = 14;
}

message DailyTaskDataNotify {
    uint32 score_reward_id = 11;
    uint32 finished_num = 4;
    bool is_taken_score_reward = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 158;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message DailyTaskProgressNotify {
    DailyTaskInfo info = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 170;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message DailyTaskScoreRewardNotify {
    uint32 reward_id = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 117;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message WorldOwnerDailyTaskNotify {
    uint32 filter_city_id = 2;
    repeated DailyTaskInfo task_list = 1;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 102;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message AddRandTaskInfoNotify {
    uint32 rand_task_id = 5;
    Vector pos = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 119;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message RemoveRandTaskInfoNotify {
    bool is_succ = 9;
    
    FinishReason reason = 10;
    enum FinishReason {
        DEFAULT = 0;
        CLEAR = 1;
        DISTANCE = 2;
        FINISH = 3;
    }
    
    uint32 rand_task_id = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 161;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TakePlayerLevelRewardReq {
    uint32 level = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 129;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message TakePlayerLevelRewardRsp {
    uint32 reward_id = 9;
    int32 retcode = 13;
    uint32 level = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 157;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlayerLevelRewardUpdateNotify {
    repeated uint32 level_list = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 200;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GivingRecord {
    bool is_finished = 9;
    uint32 group_id = 5;
    bool is_gadget_giving = 8;
    uint32 giving_id = 3;
    uint32 last_group_id = 6;
    uint32 config_id = 2;
    map<uint32, uint32> material_cnt_map = 15;
}

message GivingRecordNotify {
    repeated GivingRecord giving_record_list = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 116;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GivingRecordChangeNotify {
    bool is_deactive = 11;
    GivingRecord giving_record = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 187;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ItemGivingReq {
    map<uint64, uint32> item_guid_count_map = 15;
    uint32 giving_id = 13;
    repeated ItemParam item_param_list = 4;
    
    ItemGivingType item_giving_type = 2;
    enum ItemGivingType {
        QUEST = 0;
        GADGET = 1;
    }
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 140;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ItemGivingRsp {
    uint32 giving_group_id = 1;
    uint32 giving_id = 13;
    int32 retcode = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 118;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlayerCookArgsReq {
    uint32 assist_avatar = 10;
    uint32 recipe_id = 11;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 166;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PlayerCookArgsRsp {
    int32 retcode = 4;
    float qte_range_ratio = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 168;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlayerLuaShellNotify {
    LuaShellType shell_type = 7;
    uint32 id = 5;
    bytes lua_shell = 12;
    uint32 use_type = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 133;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ServerDisconnectClientNotify {
    uint32 data = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 184;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message AntiAddictNotify {
    int32 msg_type = 6;
    string msg = 3;
    string level = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 180;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlayerForceExitReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 189;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message PlayerForceExitRsp {
    int32 retcode = 15;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 159;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlayerInjectFixNotify {
    uint32 id = 13;
    bytes inject_fix = 10;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 132;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TaskVar {
    uint32 key = 8;
    repeated int32 value_list = 6;
}

message TaskVarNotify {
    repeated TaskVar task_var_list = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 160;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ClientLockGameTimeNotify {
    bool is_lock = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 114;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GetNextResourceInfoReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 192;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GetNextResourceInfoRsp {
    string next_resource_url = 14;
    ResVersionConfig next_res_version_config = 2;
    int32 retcode = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 120;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message AdjustWorldLevelReq {
    uint32 expect_world_level = 8;
    uint32 cur_world_level = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 164;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message AdjustWorldLevelRsp {
    int32 retcode = 13;
    uint32 cd_over_time = 15;
    uint32 after_world_level = 14;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 138;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message DailyTaskFilterCityReq {
    uint32 city_id = 8;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 111;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message DailyTaskFilterCityRsp {
    int32 retcode = 5;
    uint32 city_id = 9;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 144;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message DailyTaskUnlockedCitiesNotify {
    repeated uint32 unlocked_city_list = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 186;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ExclusiveRuleInfo {
    repeated uint32 object_id_list = 1;
    uint32 rule_type = 10;
}

message ExclusiveRuleNotify {
    repeated ExclusiveRuleInfo rule_info_list = 5;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 101;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message CompoundUnlockNotify {
    uint32 compound_id = 3;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 128;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message GameplayRecommendationSkillRequest {
    uint32 skill_depot_id = 1;
}

message GameplayRecommendationReliquaryRequest {
    uint32 equip_type = 6;
}

message GameplayRecommendationElementReliquaryRequest {
    uint32 equip_type = 9;
    uint32 element_type = 12;
}

message GetGameplayRecommendationReq {
    uint32 avatar_id = 9;
    
    oneof detail {
        GameplayRecommendationSkillRequest skill_request = 553;
        GameplayRecommendationReliquaryRequest reliquary_request = 1993;
        GameplayRecommendationElementReliquaryRequest element_reliquary_request = 1489;
    }
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 151;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message GameplayRecommendationSkillResponse {
    uint32 skill_depot_id = 13;
    repeated uint32 skill_id_list = 9;
}

message GameplayRecommendationReliquaryMainPropData {
    uint32 permillage = 1;
    uint32 main_prop_id = 12;
}

message GameplayRecommendationReliquaryResponse {
    repeated GameplayRecommendationReliquaryMainPropData main_prop_data_list = 8;
    uint32 equip_type = 3;
}

message GameplayRecommendationElementReliquaryResponse {
    uint32 element_type = 11;
    repeated GameplayRecommendationReliquaryMainPropData main_prop_data_list = 5;
    uint32 equip_type = 15;
}

message GetGameplayRecommendationRsp {
    int32 retcode = 6;
    uint32 avatar_id = 15;
    
    oneof detail {
        GameplayRecommendationSkillResponse skill_response = 1022;
        GameplayRecommendationReliquaryResponse reliquary_response = 196;
        GameplayRecommendationElementReliquaryResponse element_reliquary_response = 167;
    }
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 123;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message TakeBackGivingItemReq {
    uint32 giving_id = 4;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 171;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message TakeBackGivingItemRsp {
    uint32 giving_id = 10;
    int32 retcode = 6;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 145;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlayerNicknameAuditDataNotify {
    ContentAuditInfo info = 13;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 108;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message PlayerNicknameNotify {
    string nickname = 7;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 109;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message NicknameAuditConfigNotify {
    bool is_open = 8;
    uint32 submit_limit = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 152;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}

message ReadNicknameAuditReq {
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 177;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
        IS_ALLOW_CLIENT = 1;
    }
}

message ReadNicknameAuditRsp {
    int32 retcode = 12;
    
    enum CmdId {
        option allow_alias = true;
        NONE = 0;
        CMD_ID = 137;
        ENET_CHANNEL_ID = 0;
        ENET_IS_RELIABLE = 1;
    }
}
